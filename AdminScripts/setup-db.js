// Generated by CoffeeScript 1.12.7
(function() {
  var DefaultTabletConfig, MongoClient, Server, calendarServerUrl, devicesInfoMaster, devicesInfoMasterSource, devicesInfoMasterStr, energyServerUrl, frontDoorLockHostname, frontDoorLockUserNum, frontDoorLockUserPin, fs, gamesRoomBlindsHostname, genBlindsActions, getBlindsActions, getDeviceConfigList, getDoorActions, getServerList, getSonosConfig, landingBathBlindsHostname, mongoUrl, officeBlindsHostname, replaceAll, replaceFavs, setConfigInDb, sonosServerUrl,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  MongoClient = require('mongodb').MongoClient;

  Server = require('mongodb').Server;

  fs = require('fs');

  DefaultTabletConfig = require('../www/js/default-tablet-config.js');

  devicesInfoMasterSource = "//domoticzoff/PiShare/nodeuser/config/MasterDevices.json";

  devicesInfoMasterStr = fs.readFileSync(devicesInfoMasterSource, {
    encoding: 'utf8'
  });

  devicesInfoMaster = JSON.parse(devicesInfoMasterStr);

  mongoUrl = devicesInfoMaster.devices.wallTabletConfig.url;

  if (process.argv[2] != null) {
    if (process.argv[2] === "localhost") {
      mongoUrl = 'mongodb://localhost:27017/WallTablets';
    } else if (process.argv[2][0] !== '-') {
      mongoUrl = process.argv[2];
    }
  }

  console.log("Mongo database is " + mongoUrl);

  replaceFavs = false;

  if ((process.argv[2] != null) && process.argv[2] === "-replacefavs" || (process.argv[3] != null) && process.argv[3] === "-replacefavs") {
    replaceFavs = true;
  }

  sonosServerUrl = devicesInfoMaster.devices.sonosServer.url;

  console.log("SonosServer is " + sonosServerUrl);

  calendarServerUrl = devicesInfoMaster.devices.calendarServer.url;

  energyServerUrl = devicesInfoMaster.devices.energyServer.url;

  console.log("CalendarServer is " + calendarServerUrl);

  console.log("EnergyServer is " + energyServerUrl);

  officeBlindsHostname = devicesInfoMaster.devices.officeBlinds.hostname;

  gamesRoomBlindsHostname = devicesInfoMaster.devices.gamesRoomBlinds.hostname;

  landingBathBlindsHostname = devicesInfoMaster.devices.landingBathBlinds.hostname;

  console.log("OfficeBlinds is " + officeBlindsHostname);

  console.log("Games Room Blinds is " + gamesRoomBlindsHostname);

  console.log("Landing Bath Blinds is " + landingBathBlindsHostname);

  frontDoorLockHostname = devicesInfoMaster.devices.frontDoorLock.hostname;

  frontDoorLockUserNum = devicesInfoMaster.devices.frontDoorLock.userNum;

  frontDoorLockUserPin = devicesInfoMaster.devices.frontDoorLock.userPin;

  console.log("Front Door is " + frontDoorLockHostname);

  replaceAll = function(find, replace, str) {
    return str.replace(new RegExp(find, 'g'), replace);
  };

  console.log('Setting Tablet Configuration from folder');

  console.log(__dirname + '/tablets');

  console.log();

  MongoClient.connect(mongoUrl, function(err, db) {
    var bAction, blindsActions, commonConfig, configSettingsToGet, configsToSet, dAction, defaultTabletConfig, devConf, deviceConfigList, doorActions, i, j, k, key, l, len, len1, len2, len3, newConfig, sAction, sonosConfig, val;
    if (!db) {
      console.error('Error! MongoDB must be running ... Shutting down');
      process.exit(1);
    }
    configsToSet = {
      count: 0
    };
    defaultTabletConfig = new DefaultTabletConfig();
    configSettingsToGet = {
      showCalServerButton: true,
      showEnergyServerButton: true,
      calServerUrl: calendarServerUrl + "/calendar/min/45",
      energyServerUrl: energyServerUrl
    };
    commonConfig = defaultTabletConfig.get(configSettingsToGet);
    deviceConfigList = getDeviceConfigList();
    doorActions = getDoorActions();
    sonosConfig = getSonosConfig(deviceConfigList);
    blindsActions = getBlindsActions();
    for (i = 0, len = doorActions.length; i < len; i++) {
      dAction = doorActions[i];
      commonConfig.common.fixedActions.push(dAction);
    }
    for (j = 0, len1 = blindsActions.length; j < len1; j++) {
      bAction = blindsActions[j];
      commonConfig.common.fixedActions.push(bAction);
    }
    for (k = 0, len2 = sonosConfig.length; k < len2; k++) {
      sAction = sonosConfig[k];
      commonConfig.common.fixedActions.push(sAction);
    }
    for (l = 0, len3 = deviceConfigList.length; l < len3; l++) {
      devConf = deviceConfigList[l];
      newConfig = {};
      for (key in devConf) {
        val = devConf[key];
        newConfig[key] = val;
      }
      newConfig["common"] = commonConfig.common;
      newConfig.common["servers"] = getServerList();
      setConfigInDb(db, newConfig, configsToSet, devConf.favourites);
    }
  });

  setConfigInDb = function(configDb, deviceConfig, configsToSet, favourites) {
    configDb.collection('TabletConfig').findOne({
      'deviceName': deviceConfig['deviceName']
    }, function(err, doc) {
      var curFavourites, fav, i, len, ref;
      curFavourites = [];
      if ((!replaceFavs) && (doc != null) && (doc.favourites != null) && doc.favourites.length !== 0) {
        ref = doc.favourites;
        for (i = 0, len = ref.length; i < len; i++) {
          fav = ref[i];
          if (indexOf.call(curFavourites, fav) < 0) {
            curFavourites.push(fav);
          }
        }
      }
      if (curFavourites.length > 0) {
        deviceConfig["favourites"] = curFavourites;
      }
      configsToSet.count++;
      configDb.collection('TabletConfig').update({
        'deviceName': deviceConfig['deviceName']
      }, deviceConfig, {
        upsert: true
      }, function(err, numberOfRemovedDocs) {
        if (err !== null) {
          console.log('Failed to save new info ' + err);
          configDb.close();
          process.exit(1);
        } else {
          configsToSet.count--;
          if (configsToSet.count === 0) {
            console.log('All config set');
            configDb.close();
            process.exit(1);
          }
        }
      });
    });
  };

  getSonosConfig = function(deviceConfigList) {
    var act, actionConfig, confIdx, deviceConfig, i, j, len, len1, roomName, sonosConfig, sonosRoomName;
    sonosConfig = [];
    for (confIdx = i = 0, len = deviceConfigList.length; i < len; confIdx = ++i) {
      deviceConfig = deviceConfigList[confIdx];
      sonosRoomName = deviceConfig['sonosRoomName'];
      roomName = deviceConfig['roomName'];
      if (deviceConfig['sonosRoomName'] === '') {
        confIdx++;
        continue;
      }
      actionConfig = [
        {
          'actionName': 'Play',
          'iconName': 'music-play',
          'uri': '/play'
        }, {
          'actionName': 'Stop',
          'iconName': 'music-stop',
          'uri': '/pause'
        }, {
          'actionName': 'Vol +',
          'iconName': 'music-vol-up',
          'uri': '/volume/+10'
        }, {
          'actionName': 'Vol -',
          'iconName': 'music-vol-down',
          'uri': '/volume/-10'
        }
      ];
      for (j = 0, len1 = actionConfig.length; j < len1; j++) {
        act = actionConfig[j];
        act['actionUrl'] = sonosServerUrl + '/' + sonosRoomName + act['uri'];
        act['uri'] = sonosServerUrl + '/' + sonosRoomName + act['uri'];
        act['groupName'] = roomName;
        act['tierName'] = 'sonosTier';
        act['colSpan'] = 1;
        act['rowSpan'] = 1;
        act['name'] = act['actionName'];
        act['visibility'] = 'all';
        act['tileType'] = 'Sonos';
        sonosConfig.push(act);
      }
      confIdx++;
    }
    return sonosConfig;
  };

  getBlindsActions = function() {
    var blindsDef;
    blindsDef = [["Games", [["1", "Shade 1"], ["2", "Shade 2"]], "http://" + gamesRoomBlindsHostname + "/blind/"], ["Landing Bath", [["1", "Shade"]], "http://" + landingBathBlindsHostname + "/blind/"], ["Office", [["1", "Rob's Shade"], ["2", "Left"], ["3", "Mid-Left"], ["4", "Mid-Right"], ["5", "Right"]], "http://" + officeBlindsHostname + "/blind/"]];
    return genBlindsActions(blindsDef);
  };

  genBlindsActions = function(blindsDefs) {
    var actions, blindsDirns, dirn, i, j, k, len, len1, len2, ref, room, win;
    blindsDirns = [["Up", "up"], ["Stop", "stop"], ["Down", "down"]];
    actions = [];
    for (i = 0, len = blindsDefs.length; i < len; i++) {
      room = blindsDefs[i];
      for (j = 0, len1 = blindsDirns.length; j < len1; j++) {
        dirn = blindsDirns[j];
        ref = room[1];
        for (k = 0, len2 = ref.length; k < len2; k++) {
          win = ref[k];
          actions.push({
            tierName: "doorBlindsTier",
            actionNum: 0,
            actionName: win[1] + " " + dirn[0],
            groupName: room[0],
            actionUrl: room[2] + win[0] + "/" + dirn[1] + "/pulse",
            iconName: "blinds-" + dirn[1]
          });
        }
      }
    }
    return actions;
  };

  getDoorActions = function() {
    return [
      {
        actionName: "Main Unlock",
        groupName: "Front Door",
        actionUrl: "http://" + frontDoorLockHostname + "/u/0/" + frontDoorLockUserNum + "/" + frontDoorLockUserPin,
        iconName: "door-unlock"
      }, {
        actionName: "Main Lock",
        groupName: "Front Door",
        actionUrl: "http://" + frontDoorLockHostname + "/l/0",
        iconName: "door-lock"
      }, {
        actionName: "Inner Unlock",
        groupName: "Front Door",
        actionUrl: "http://" + frontDoorLockHostname + "/u/1/" + frontDoorLockUserNum + "/" + frontDoorLockUserPin,
        iconName: "door-unlock"
      }, {
        actionName: "Inner Lock",
        groupName: "Front Door",
        actionUrl: "http://" + frontDoorLockHostname + "/l/1",
        iconName: "door-lock"
      }
    ];
  };

  getDeviceConfigList = function(configDb) {
    var baseFolder, devInfo, deviceInfoList, fIdx, folderList, jsonStr;
    deviceInfoList = [];
    baseFolder = './tablets/';
    folderList = fs.readdirSync(baseFolder);
    fIdx = 0;
    while (fIdx < folderList.length) {
      if (folderList[fIdx].indexOf('.json') > 0) {
        jsonStr = fs.readFileSync(baseFolder + folderList[fIdx], {
          encoding: 'utf8'
        });
        jsonStr = replaceAll('@sonosServerUrl', sonosServerUrl, jsonStr);
        devInfo = JSON.parse(jsonStr);
        deviceInfoList.push(devInfo);
      }
      fIdx++;
    }
    return deviceInfoList;
  };

  getServerList = function() {
    return [
      {
        "type": "domoticz",
        "name": "DomoticzUT",
        "url": "http://domoticzut:80",
        "iconAliasing": "automationIcons"
      }, {
        "type": "domoticz",
        "name": "DomoticzPLC",
        "url": "http://domoticzplc:80",
        "iconAliasing": "automationIcons"
      }, {
        "type": "domoticz",
        "name": "DomoticzCEL",
        "url": "http://domoticzcel:80",
        "iconAliasing": "automationIcons"
      }, {
        "type": "domoticz",
        "name": "DomoticzOFF",
        "url": "http://domoticzoff:80",
        "iconAliasing": "automationIcons"
      }, {
        "type": "domoticz",
        "name": "DomoticzKIT",
        "url": "http://calprinter:80",
        "iconAliasing": "automationIcons"
      }
    ];
  };

}).call(this);

//# sourceMappingURL=setup-db.js.map
