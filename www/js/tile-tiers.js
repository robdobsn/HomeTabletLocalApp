// Generated by CoffeeScript 1.6.3
var TileTiers;

TileTiers = (function() {
  function TileTiers(parentTag) {
    this.parentTag = parentTag;
    this.tiers = [];
  }

  TileTiers.prototype.numTiers = function() {
    return this.tiers.length;
  };

  TileTiers.prototype.getTier = function(tierIdx) {
    return this.tiers[tierIdx];
  };

  TileTiers.prototype.addTier = function(tier) {
    this.tiers.push(tier);
    return this.tiers.length - 1;
  };

  TileTiers.prototype.removeAll = function() {
    this.clear();
    return this.tiers = [];
  };

  TileTiers.prototype.findTierIdx = function(tierName) {
    var tier, tierIdx, _i, _len, _ref;
    tierIdx = 0;
    _ref = this.tiers;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tier = _ref[_i];
      if (tier.tierName === tierName) {
        return tierIdx;
      }
      tierIdx += 1;
    }
    return -1;
  };

  TileTiers.prototype.getTileTierSelector = function(tierName) {
    var tier, _i, _len, _ref;
    _ref = this.tiers;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tier = _ref[_i];
      if (tier.tierName === tierName) {
        return tier.getTileTierSelector();
      }
    }
    return "";
  };

  TileTiers.prototype.getTierName = function(tierIdx) {
    if (tierIdx >= this.tiers.length) {
      return "";
    }
    return this.tiers[tierIdx].tierName;
  };

  TileTiers.prototype.addGroup = function(tierIdx, groupTitle) {
    if (tierIdx >= this.tiers.length) {
      return;
    }
    return this.tiers[tierIdx].addGroup(groupTitle);
  };

  TileTiers.prototype.clearGroup = function(tierIdx, groupIdx) {
    if (tierIdx >= this.tiers.length) {
      return;
    }
    return this.tiers[tierIdx].clearTileGroup(groupIdx);
  };

  TileTiers.prototype.findGroupIdx = function(tierIdx, groupName) {
    if (tierIdx >= this.tiers.length) {
      return;
    }
    return this.tiers[tierIdx].findGroupIdx(groupName);
  };

  TileTiers.prototype.reDoLayout = function() {
    var tier, _i, _len, _ref, _results;
    _ref = this.tiers;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tier = _ref[_i];
      _results.push(tier.reDoLayout());
    }
    return _results;
  };

  TileTiers.prototype.addTileToTierGroup = function(tierIdx, groupIdx, tile) {
    if (tierIdx >= this.tiers.length) {
      return;
    }
    tile.tileBasics.setTierGroupIds(tierIdx, groupIdx);
    return this.tiers[tierIdx].addTileToGroup(groupIdx, tile);
  };

  TileTiers.prototype.clear = function() {
    var tier, _i, _len, _ref, _results;
    _ref = this.tiers;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tier = _ref[_i];
      _results.push(tier.removeAll());
    }
    return _results;
  };

  TileTiers.prototype.findExistingTile = function(tileName) {
    var exTile, tier, _i, _len, _ref;
    _ref = this.tiers;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tier = _ref[_i];
      exTile = tier.findExistingTile(tileName);
      if (exTile !== null) {
        return exTile;
      }
    }
    return null;
  };

  return TileTiers;

})();
