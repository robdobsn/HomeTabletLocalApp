// Generated by CoffeeScript 1.12.7
(function() {
  App.TabletConfigManager = (function() {
    function TabletConfigManager(defaultTabletName) {
      this.defaultTabletName = defaultTabletName;
      this.configData = {};
      this.defaultTabletConfig = new App.DefaultTabletConfig();
      this.defaultConfigSettings = {
        showCalServerSetting: true,
        showAutomationServerSettings: ["Indigo", "Vera", "Fibaro"],
        showEnergyServerSetting: true
      };
      return;
    }

    TabletConfigManager.prototype.getTabName = function() {
      var tabName;
      tabName = App.LocalStorage.get("DeviceConfigName");
      if ((tabName == null) || tabName === "") {
        tabName = this.defaultTabletName;
      }
      return tabName;
    };

    TabletConfigManager.prototype.getReqUrl = function() {
      var reqURL, tabName;
      reqURL = App.LocalStorage.get("ConfigServerUrl");
      if ((reqURL == null) || reqURL === "") {
        return "";
      }
      tabName = this.getTabName();
      reqURL = reqURL.trim();
      reqURL = reqURL + (reqURL.slice(-1) === "/" ? "" : "/") + "tabletconfig/" + tabName;
      return reqURL;
    };

    TabletConfigManager.prototype.setReadyCallback = function(readyCallback) {
      this.readyCallback = readyCallback;
    };

    TabletConfigManager.prototype.getConfigData = function() {
      return this.configData;
    };

    TabletConfigManager.prototype.addFavouriteButton = function(buttonInfo) {
      console.log("Add " + buttonInfo.tileName);
      if (!("favourites" in this.configData)) {
        this.configData.favourites = [];
      }
      this.configData.favourites.push({
        tileName: buttonInfo.tileName,
        groupName: buttonInfo.groupName
      });
      return this.saveDeviceConfig();
    };

    TabletConfigManager.prototype.deleteFavouriteButton = function(buttonInfo) {
      var fav, favIdx, i, idx, len, ref;
      console.log("Delete " + buttonInfo.tileName);
      if (!("favourites" in this.configData)) {
        return;
      }
      favIdx = -1;
      ref = this.configData.favourites;
      for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
        fav = ref[idx];
        if (fav.tileName === buttonInfo.tileName && fav.groupName === buttonInfo.groupName) {
          favIdx = idx;
          break;
        }
      }
      if (favIdx >= 0) {
        this.configData.favourites.splice(favIdx, 1);
        return this.saveDeviceConfig();
      }
    };

    TabletConfigManager.prototype.saveDeviceConfig = function() {
      var reqURL, tabName;
      reqURL = this.getReqUrl();
      App.LocalStorage.set(reqURL, this.configData);
      tabName = this.getTabName();
      if ((tabName == null) || tabName === "") {
        console.log("WallTabletDebug Unable to save device config as tablet name unknown");
      } else {
        console.log("WallTabletDebug Saving device config for " + tabName);
      }
      return $.ajax({
        url: reqURL,
        type: 'POST',
        data: JSON.stringify({
          "favourites": this.configData.favourites
        }),
        contentType: "application/json",
        success: (function(_this) {
          return function(data, status, response) {
            return console.log("WallTabletDebug Sent new config data ok");
          };
        })(this),
        error: (function(_this) {
          return function(jqXHR, textStatus, errorThrown) {
            return console.error("WallTabletDebug Failed to send new config data: " + textStatus + " " + errorThrown);
          };
        })(this)
      });
    };

    TabletConfigManager.prototype.requestConfig = function() {
      var reqURL, tabName;
      reqURL = this.getReqUrl();
      if (reqURL === "") {
        this.configData = this.defaultTabletConfig.get(this.defaultConfigSettings);
        this.readyCallback();
        return;
      }
      tabName = this.getTabName();
      console.log("WallTabletDebug Requesting tablet config from tabname " + this.getTabName() + " using URL " + reqURL);
      this.catchAjaxFail = setTimeout((function(_this) {
        return function() {
          return _this.ajaxFailTimeout();
        };
      })(this), 2000);
      $.ajax(reqURL, {
        type: "GET",
        dataType: "text",
        crossDomain: true,
        timeout: 1500,
        success: (function(_this) {
          return function(data, textStatus, jqXHR) {
            var curTabName, jsonData, jsonText;
            clearTimeout(_this.catchAjaxFail);
            jsonText = jqXHR.responseText;
            jsonData = $.parseJSON(jsonText);
            if (jsonText === "{}") {
              console.log("WallTabletDebug Got tablet config but it's empty");
              _this.configData = _this.defaultTabletConfig.get(_this.defaultConfigSettings);
            } else {
              console.log("WallTabletDebug Got tablet config data");
              tabName = jsonData["deviceName"];
              curTabName = App.LocalStorage.get("DeviceConfigName");
              if ((tabName != null) && tabName !== curTabName) {
                App.LocalStorage.set("DeviceConfigName", tabName);
                console.log("WallTabletDebug DeviceConfigName was " + curTabName + " now set to " + tabName);
                console.log("WallTabletDebug " + " TABLETCONFIG DeviceConfigName was " + curTabName + " now set to " + tabName);
                App.LocalStorage.logEvent("CnfLog", "DeviceConfigName was " + curTabName + " now set to " + tabName);
              }
              _this.configData = jsonData;
              App.LocalStorage.set(reqURL, _this.configData);
            }
            _this.readyCallback();
            console.log("WallTabletDebug Storing data for " + reqURL + " = " + JSON.stringify(jsonData));
          };
        })(this),
        error: (function(_this) {
          return function(jqXHR, textStatus, errorThrown) {
            var storedData;
            console.log("WallTabletDebug Get tablet config data failed with an error " + textStatus);
            clearTimeout(_this.catchAjaxFail);
            storedData = App.LocalStorage.get(reqURL);
            console.log("WallTabletDebug Config Getting data stored for " + reqURL + " result = " + storedData);
            if (storedData != null) {
              console.log("WallTabletDebug Using stored data for " + reqURL);
              _this.configData = storedData;
            } else {
              _this.configData = _this.defaultTabletConfig.get(_this.defaultConfigSettings);
            }
            _this.readyCallback();
          };
        })(this)
      });
    };

    TabletConfigManager.prototype.ajaxFailTimeout = function() {
      console.log("WallTabletDebug Get tablet config timed out via setTimeout");
      this.configData = this.defaultTabletConfig.get(this.defaultConfigSettings);
      this.readyCallback();
    };

    return TabletConfigManager;

  })();

}).call(this);

//# sourceMappingURL=tablet-config.js.map
