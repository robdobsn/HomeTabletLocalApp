// Generated by CoffeeScript 1.7.1
var AutomationServer,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

AutomationServer = (function() {
  function AutomationServer(automationActionsUrl, automationExecUrl, veraServerUrl, indigoServerUrl, indigo2ServerUrl, fibaroServerUrl, sonosActionsUrl, mediaPlayHelper) {
    this.automationActionsUrl = automationActionsUrl;
    this.automationExecUrl = automationExecUrl;
    this.veraServerUrl = veraServerUrl;
    this.indigoServerUrl = indigoServerUrl;
    this.indigo2ServerUrl = indigo2ServerUrl;
    this.fibaroServerUrl = fibaroServerUrl;
    this.sonosActionsUrl = sonosActionsUrl;
    this.mediaPlayHelper = mediaPlayHelper;
    this.executeCommand = __bind(this.executeCommand, this);
    this.callBackWithSumActions = __bind(this.callBackWithSumActions, this);
    this.fibaroServerReadyCb = __bind(this.fibaroServerReadyCb, this);
    this.veraServerReadyCb = __bind(this.veraServerReadyCb, this);
    this.indigo2ServerReadyCb = __bind(this.indigo2ServerReadyCb, this);
    this.indigoServerReadyCb = __bind(this.indigoServerReadyCb, this);
    this.indigoServer = new IndigoServer(this.indigoServerUrl);
    this.indigoServer.setReadyCallback(this.indigoServerReadyCb);
    this.indigo2Server = new IndigoServer(this.indigo2ServerUrl);
    this.indigo2Server.setReadyCallback(this.indigo2ServerReadyCb);
    this.veraServer = new VeraServer(this.veraServerUrl);
    this.veraServer.setReadyCallback(this.veraServerReadyCb);
    this.fibaroServer = new FibaroServer(this.fibaroServerUrl);
    this.fibaroServer.setReadyCallback(this.fibaroServerReadyCb);
    this.useDirectAccessForExec = true;
    this.veraActions = [];
    this.indigoActions = [];
    this.indigo2Actions = [];
    this.fibaroActions = [];
    this.baseAutomationActions = {};
    this.frontDoorUrl = "http://192.168.0.221/";
    this.doorActions = [
      {
        tierName: "doorBlindsTier",
        actionNum: 0,
        actionName: "Main Unlock",
        groupName: "Front Door",
        actionUrl: this.frontDoorUrl + "main-unlock",
        iconName: "door-unlock"
      }, {
        tierName: "doorBlindsTier",
        actionNum: 0,
        actionName: "Main Lock",
        groupName: "Front Door",
        actionUrl: this.frontDoorUrl + "main-lock",
        iconName: "door-lock"
      }, {
        tierName: "doorBlindsTier",
        actionNum: 0,
        actionName: "Inner Unlock",
        groupName: "Front Door",
        actionUrl: this.frontDoorUrl + "inner-unlock",
        iconName: "door-unlock"
      }, {
        tierName: "doorBlindsTier",
        actionNum: 0,
        actionName: "Inner Lock",
        groupName: "Front Door",
        actionUrl: this.frontDoorUrl + "inner-lock",
        iconName: "door-lock"
      }
    ];
    this.blindsActions = GetBlindsActions();
    this.sonosActions = {};
    this.soundPlayActions = {};
  }

  AutomationServer.prototype.setReadyCallback = function(readyCallback) {
    this.readyCallback = readyCallback;
  };

  AutomationServer.prototype.indigoServerReadyCb = function(actions) {
    this.indigoActions = actions;
    return this.callBackWithSumActions();
  };

  AutomationServer.prototype.indigo2ServerReadyCb = function(actions) {
    this.indigo2Actions = actions;
    return this.callBackWithSumActions();
  };

  AutomationServer.prototype.veraServerReadyCb = function(actions) {
    this.veraActions = actions;
    return this.callBackWithSumActions();
  };

  AutomationServer.prototype.fibaroServerReadyCb = function(actions) {
    this.fibaroActions = actions;
    return this.callBackWithSumActions();
  };

  AutomationServer.prototype.callBackWithSumActions = function() {
    var k, sumActions, v, _ref;
    sumActions = {
      "doors": this.doorActions,
      "blinds": this.blindsActions,
      "vera": this.veraActions,
      "indigo": this.indigoActions,
      "indigo2": this.indigo2Actions,
      "fibaro": this.fibaroActions
    };
    _ref = this.baseAutomationActions;
    for (k in _ref) {
      v = _ref[k];
      if (k !== "vera" && k !== "indigo" && k !== "indigo2" && k !== "fibaro" && k !== "blinds" && k !== "doors") {
        sumActions[k] = v;
      }
    }
    sumActions["sonos"] = this.sonosActions;
    sumActions["soundPlayActions"] = this.soundPlayActions;
    return this.readyCallback(sumActions);
  };

  AutomationServer.prototype.getActionGroups = function() {
    this.indigoServer.getActionGroups();
    this.indigo2Server.getActionGroups();
    return this.getSonosActions();
  };

  AutomationServer.prototype.getActionGroupsFromIntermediateServer = function() {
    return $.ajax(this.automationActionsUrl, {
      type: "GET",
      dataType: "json",
      success: (function(_this) {
        return function(data, textStatus, jqXHR) {
          if ("vera" in data) {
            _this.veraActions = data.vera;
          }
          if ("indigo" in data) {
            _this.indigoActions = data.indigo;
          }
          if ("indigo2" in data) {
            _this.indigo2Actions = data.indigo2;
          }
          if ("fibaro" in data) {
            _this.fibaroActions = data.fibaro;
          }
          if ("doorController" in data) {
            _this.doorActions = data.doorController;
          }
          if ("blinds" in data) {
            _this.blindsActions = data.blinds;
          }
          return _this.callBackWithSumActions();
        };
      })(this),
      error: (function(_this) {
        return function(jqXHR, textStatus, errorThrown) {
          return console.error("Get Actions failed: " + textStatus + " " + errorThrown + " URL=" + _this.automationActionsUrl);
        };
      })(this)
    });
  };

  AutomationServer.prototype.getSonosActions = function() {
    if (this.sonosActionsUrl === "") {
      return;
    }
    return $.ajax(this.sonosActionsUrl, {
      type: "GET",
      dataType: "json",
      success: (function(_this) {
        return function(data, textStatus, jqXHR) {
          _this.sonosActions = data.sonos;
          _this.soundPlayActions = data.soundsToPlay;
          return _this.callBackWithSumActions;
        };
      })(this),
      error: (function(_this) {
        return function(jqXHR, textStatus, errorThrown) {
          return console.error("Get Sonos actions failed: " + textStatus + " " + errorThrown + " URL=" + _this.sonosActionsUrl);
        };
      })(this)
    });
  };

  AutomationServer.prototype.executeCommand = function(cmdParams) {
    var cmdToExec;
    if ((cmdParams == null) || cmdParams === "") {
      return;
    }
    if (cmdParams.slice(0, 4) === "http") {
      return $.ajax(cmdParams, {
        type: "GET",
        dataType: "text",
        success: (function(_this) {
          return function(data, textStatus, jqXHR) {
            return _this.mediaPlayHelper.play("ok");
          };
        })(this),
        error: (function(_this) {
          return function(jqXHR, textStatus, errorThrown) {
            console.error("Direct exec command failed: " + textStatus + " " + errorThrown + " COMMAND=" + cmdParams);
            return _this.mediaPlayHelper.play("fail");
          };
        })(this)
      });
    } else {
      cmdToExec = this.automationExecUrl + "/" + cmdParams;
      return $.ajax(cmdToExec, {
        type: "GET",
        dataType: "text",
        success: (function(_this) {
          return function(data, textStatus, jqXHR) {
            return _this.mediaPlayHelper.play("ok");
          };
        })(this),
        error: (function(_this) {
          return function(jqXHR, textStatus, errorThrown) {
            console.error("Intermediate exec command failed: " + textStatus + " " + errorThrown + " COMMAND=" + cmdToExec);
            return _this.mediaPlayHelper.play("fail");
          };
        })(this)
      });
    }
  };

  return AutomationServer;

})();
