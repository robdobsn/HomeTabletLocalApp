// Generated by CoffeeScript 1.6.3
var AutomationServer,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

AutomationServer = (function() {
  function AutomationServer(intermediateServerURL, veraServerUrl, indigoServerUrl) {
    this.intermediateServerURL = intermediateServerURL;
    this.veraServerUrl = veraServerUrl;
    this.indigoServerUrl = indigoServerUrl;
    this.executeCommand = __bind(this.executeCommand, this);
    this.callBackWithSumActions = __bind(this.callBackWithSumActions, this);
    this.veraServerReadyCb = __bind(this.veraServerReadyCb, this);
    this.indigoServerReadyCb = __bind(this.indigoServerReadyCb, this);
    this.ACTIONS_URI = this.intermediateServerURL + "/actions";
    this.EXEC_URI = this.intermediateServerURL + "/exec";
    this.indigoServer = new IndigoServer(this.indigoServerUrl);
    this.indigoServer.setReadyCallback(this.indigoServerReadyCb);
    this.veraServer = new VeraServer(this.veraServerUrl);
    this.veraServer.setReadyCallback(this.veraServerReadyCb);
    this.useDirectAccessForGet = true;
    this.useDirectAccessForExec = true;
    this.veraActions = [];
    this.indigoActions = [];
  }

  AutomationServer.prototype.setReadyCallback = function(readyCallback) {
    this.readyCallback = readyCallback;
  };

  AutomationServer.prototype.indigoServerReadyCb = function(actions) {
    this.indigoActions = actions;
    return this.callBackWithSumActions();
  };

  AutomationServer.prototype.veraServerReadyCb = function(actions) {
    this.veraActions = actions;
    return this.callBackWithSumActions();
  };

  AutomationServer.prototype.callBackWithSumActions = function() {
    var sumActions;
    sumActions = {
      "vera": this.veraActions,
      "indigo": this.indigoActions
    };
    return this.readyCallback(sumActions);
  };

  AutomationServer.prototype.getActionGroups = function() {
    if (this.useDirectAccessForGet) {
      this.indigoServer.getActionGroups();
      return this.veraServer.getActionGroups();
    } else {
      return this.getActionGroupsFromIntermediateServer();
    }
  };

  AutomationServer.prototype.getActionGroupsFromIntermediateServer = function() {
    var _this = this;
    return $.ajax(this.ACTIONS_URI, {
      type: "GET",
      dataType: "json",
      success: function(data, textStatus, jqXHR) {
        return _this.readyCallback(data);
      },
      error: function(jqXHR, textStatus, errorThrown) {
        return console.log("Get Actions failed: " + textStatus + " " + errorThrown);
      }
    });
  };

  AutomationServer.prototype.executeCommand = function(cmdParams) {
    var _this = this;
    if (cmdParams.slice(0, 4) === "http") {
      return $.ajax(cmdParams, {
        type: "GET",
        dataType: "text",
        success: function(data, textStatus, jqXHR) {},
        error: function(jqXHR, textStatus, errorThrown) {
          return console.log("Direct exec command failed: " + textStatus + " " + errorThrown);
        }
      });
    } else {
      return $.ajax(this.EXEC_URI + "/" + cmdParams, {
        type: "GET",
        dataType: "text",
        success: function(data, textStatus, jqXHR) {},
        error: function(jqXHR, textStatus, errorThrown) {
          return console.log("Intermediate exec command failed: " + textStatus + " " + errorThrown);
        }
      });
    }
  };

  return AutomationServer;

})();
