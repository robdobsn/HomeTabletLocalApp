// Generated by CoffeeScript 1.8.0
var WallTabApp,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

WallTabApp = (function() {
  function WallTabApp() {
    this.actionOnUserIdle = __bind(this.actionOnUserIdle, this);
    this.automationServerReadyCb = __bind(this.automationServerReadyCb, this);
    this.tabletConfigReadyCb = __bind(this.tabletConfigReadyCb, this);
    this.mainServer = "localhost";
    this.defaultTabletName = "tabdefault";
    this.rdHomeServerUrl = "http://" + this.mainServer + ":5000";
    this.calendarUrl = "http://" + this.mainServer + ":5077/calendar/min/4";
    this.automationActionsUrl = this.rdHomeServerUrl + "/automation/api/v1.0/actions";
    this.automationExecUrl = this.rdHomeServerUrl;
    this.sonosActionsUrl = "";
    this.tabletConfigUrl = "http://" + this.mainServer + ":5076/tabletconfig";
    this.tabletLogUrl = "http://" + this.mainServer + ":5076/log";
    this.indigoServerUrl = "http://IndigoServer.local:8176";
    this.indigo2ServerUrl = "http://IndigoDown.local:8176";
    this.fibaroServerUrl = "http://macallan:5079";
    this.veraServerUrl = "http://192.168.0.206:3480";
    this.mediaPlayHelper = new MediaPlayHelper({
      "click": "assets/click.mp3",
      "ok": "assets/blip.mp3",
      "fail": "assets/fail.mp3"
    });
    this.hoursBetweenActionUpdates = 12;
    this.minsBetweenEventLogChecks = 1;
    this.maxEventsPerLogSend = 50;
    return;
  }

  WallTabApp.prototype.go = function() {
    $("body").prepend("<div id=\"sqWrapper\">\n</div>");
    this.userIdleCatcher = new UserIdleCatcher(90, this.actionOnUserIdle);
    this.automationActionGroups = [];
    this.automationServer = new AutomationServer(this.automationActionsUrl, this.automationExecUrl, this.veraServerUrl, this.indigoServerUrl, this.indigo2ServerUrl, this.fibaroServerUrl, this.sonosActionsUrl, this.mediaPlayHelper);
    this.automationServer.setReadyCallback(this.automationServerReadyCb);
    this.tabletConfigServer = new TabletConfig(this.tabletConfigUrl, this.defaultTabletName);
    this.tabletConfigServer.setReadyCallback(this.tabletConfigReadyCb);
    this.calendarServer = new CalendarServer(this);
    this.appPages = new AppPages(this, "#sqWrapper", this.automationServer.executeCommand);
    $(window).on('orientationchange', (function(_this) {
      return function() {
        return _this.buildAndDisplayUI();
      };
    })(this));
    $(window).on('resize', (function(_this) {
      return function() {
        return _this.buildAndDisplayUI();
      };
    })(this));
    this.checkEventLogs();
    setInterval((function(_this) {
      return function() {
        return _this.checkEventLogs();
      };
    })(this), this.minsBetweenEventLogChecks * 60 * 1000);
    this.requestActionAndConfigData();
    setInterval((function(_this) {
      return function() {
        return _this.requestActionAndConfigData();
      };
    })(this), this.hoursBetweenActionUpdates * 60 * 60 * 1000);
  };

  WallTabApp.prototype.requestActionAndConfigData = function() {
    this.automationServer.getActionGroups();
    return this.tabletConfigServer.requestConfig();
  };

  WallTabApp.prototype.buildAndDisplayUI = function() {
    this.appPages.build(this.automationActionGroups);
    return this.appPages.display();
  };

  WallTabApp.prototype.tabletConfigReadyCb = function() {
    return this.buildAndDisplayUI();
  };

  WallTabApp.prototype.automationServerReadyCb = function(actions, serverType) {
    if (this.checkActionGroupsChanged(this.automationActionGroups, actions)) {
      this.automationActionGroups = actions;
      this.buildAndDisplayUI();
    }
  };

  WallTabApp.prototype.checkActionGroupsChanged = function(oldActionMap, newActionMap) {
    var newActions, oldActions, servType;
    if (Object.keys(oldActionMap).length !== Object.keys(newActionMap).length) {
      return true;
    }
    for (servType in oldActionMap) {
      oldActions = oldActionMap[servType];
      if (!(servType in newActionMap)) {
        return true;
      }
      newActions = newActionMap[servType];
      if (this.checkActionsForServer(oldActions, newActions)) {
        return true;
      }
    }
    return false;
  };

  WallTabApp.prototype.checkActionsForServer = function(oldActions, newActions) {
    var j, k, newAction, oldAction, v, _i, _len;
    if (oldActions.length !== newActions.length) {
      return true;
    }
    for (j = _i = 0, _len = oldActions.length; _i < _len; j = ++_i) {
      oldAction = oldActions[j];
      newAction = newActions[j];
      if (Object.keys(oldAction).length !== Object.keys(newAction).length) {
        return true;
      }
      for (k in oldAction) {
        v = oldAction[k];
        if (!k in newAction) {
          return true;
        }
        if (v !== newAction[k]) {
          return true;
        }
      }
    }
    return false;
  };

  WallTabApp.prototype.actionOnUserIdle = function() {
    this.appPages.userIsIdle();
  };

  WallTabApp.prototype.checkEventLogs = function() {
    var ev, evList, evListJson, i, logCat, logCats, _i, _j, _len, _ref;
    evList = [];
    logCats = ["CalLog", "IndLog", "CnfLog"];
    for (_i = 0, _len = logCats.length; _i < _len; _i++) {
      logCat = logCats[_i];
      for (i = _j = 0, _ref = this.maxEventsPerLogSend; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
        ev = LocalStorage.getEvent(logCat);
        if (ev != null) {
          console.log("Logging event from " + logCat + " = " + JSON.stringify(ev));
          evList.push({
            logCat: logCat,
            timestamp: ev.timestamp,
            eventText: ev.eventText
          });
        } else {
          break;
        }
      }
    }
    if (evList.length > 0) {
      evListJson = JSON.stringify(evList);
      $.ajax({
        url: this.tabletLogUrl,
        type: 'POST',
        data: evListJson,
        contentType: "application/json",
        success: (function(_this) {
          return function(data, status, response) {
            console.log("logged events success");
          };
        })(this),
        error: (function(_this) {
          return function(jqXHR, textStatus, errorThrown) {
            var _k, _len1;
            console.log("Error log failed: " + textStatus + " " + errorThrown);
            for (_k = 0, _len1 = evList.length; _k < _len1; _k++) {
              ev = evList[_k];
              LocalStorage.logEvent(ev.logCat, ev.eventText, ev.timestamp);
            }
          };
        })(this)
      });
    }
  };

  return WallTabApp;

})();
