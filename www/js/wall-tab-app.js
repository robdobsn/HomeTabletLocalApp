// Generated by CoffeeScript 1.6.3
var WallTabApp,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

WallTabApp = (function() {
  function WallTabApp() {
    this.actionOnUserIdle = __bind(this.actionOnUserIdle, this);
    this.configReadyCb = __bind(this.configReadyCb, this);
    this.updateUIWithActionGroups = __bind(this.updateUIWithActionGroups, this);
    this.automationServerReadyCb = __bind(this.automationServerReadyCb, this);
    this.tileColours = new TileColours;
    this.rdHomeServerUrl = "http://macallan:5000";
    this.calendarUrl = this.rdHomeServerUrl + "/calendars/api/v1.0/cal";
    this.automationServerUrl = this.rdHomeServerUrl + "/automation/api/v1.0";
    this.tabletConfigUrl = this.rdHomeServerUrl + "/tablet/api/v1.0/config";
    this.indigoServerUrl = "http://IndigoServer.local:8176";
    this.veraServerUrl = "http://192.168.0.206:3480";
    this.frontDoorUrl = "http://192.168.0.221/";
    this.blindsActions = GetBlindsActions();
    this.jsonConfig = {};
    this.doorActions = [
      {
        actionNum: 0,
        actionName: "Main Unlock",
        groupName: "Front Door",
        actionUrl: this.frontDoorUrl + "main-unlock"
      }, {
        actionNum: 0,
        actionName: "Main Lock",
        groupName: "Front Door",
        actionUrl: this.frontDoorUrl + "main-lock"
      }, {
        actionNum: 0,
        actionName: "Inner Unlock",
        groupName: "Front Door",
        actionUrl: this.frontDoorUrl + "inner-unlock"
      }, {
        actionNum: 0,
        actionName: "Inner Lock",
        groupName: "Front Door",
        actionUrl: this.frontDoorUrl + "inner-lock"
      }
    ];
  }

  WallTabApp.prototype.go = function() {
    var mainTier, secondTier,
      _this = this;
    $("body").append("<div id=\"sqWrapper\">\n</div>");
    this.userIdleCatcher = new UserIdleCatcher(30, this.actionOnUserIdle);
    this.automationActionGroups = [];
    this.uiGroupMapping = {};
    this.automationServer = new AutomationServer(this.automationServerUrl, this.veraServerUrl, this.indigoServerUrl, this.blindsActions, this.doorActions);
    this.automationServer.setReadyCallback(this.automationServerReadyCb);
    this.tabletConfig = new TabletConfig(this.tabletConfigUrl);
    this.tabletConfig.setReadyCallback(this.configReadyCb);
    this.tileTiers = new TileTiers("#sqWrapper");
    mainTier = new TileTier("#sqWrapper", "_Tier1");
    mainTier.addToDom();
    this.tileTiers.addTier(mainTier);
    this.favouritesTierIdx = 0;
    this.favouritesGroupIdx = this.tileTiers.addGroup(this.favouritesTierIdx, "Home");
    this.calendarTierIdx = 0;
    this.calendarGroupIdx = this.tileTiers.addGroup(this.calendarTierIdx, "Calendar");
    this.sceneTierIdx = 0;
    this.sceneGroupIdx = this.tileTiers.addGroup(this.sceneTierIdx, "Scenes");
    secondTier = new TileTier("#sqWrapper", "_Tier2");
    secondTier.addToDom();
    this.tileTiers.addTier(secondTier);
    this.sonosTierIdx = 1;
    this.sonosGroupIdx = this.tileTiers.addGroup(this.sonosTierIdx, "Sonos");
    this.tileTiers.clear();
    this.setupClockAndCalendar(false);
    $(window).on('orientationchange', function() {
      return _this.tileTiers.reDoLayout();
    });
    $(window).on('resize', function() {
      return _this.tileTiers.reDoLayout();
    });
    this.requestActionAndConfigData();
    return setInterval(function() {
      return _this.requestActionAndConfigData();
    }, 600000);
  };

  WallTabApp.prototype.requestActionAndConfigData = function() {
    this.automationServer.getActionGroups();
    return this.tabletConfig.initTabletConfig();
  };

  WallTabApp.prototype.addClock = function(tierIdx, groupIdx) {
    var tile, tileBasics, visibility;
    visibility = "all";
    tileBasics = new TileBasics(this.tileColours.getNextColour(), 3, 1, null, "", "clock", visibility, this.tileTiers.getTileContainerSelector(tierIdx));
    tile = new Clock(tileBasics);
    return this.tileTiers.addTileToTierGroup(tierIdx, groupIdx, tile);
  };

  WallTabApp.prototype.addCalendar = function(tierIdx, onlyAddToGroupIdx) {
    var calG, calendarTileDefs, ctd, favG, lands, portr, tile, tileBasics, _i, _len, _results;
    if (onlyAddToGroupIdx == null) {
      onlyAddToGroupIdx = null;
    }
    calG = this.calendarGroupIdx;
    favG = this.favouritesGroupIdx;
    lands = "landscape";
    portr = "portrait";
    calendarTileDefs = [];
    calendarTileDefs.push(new CalendarTileDefiniton(lands, calG, 2, 2, 0));
    calendarTileDefs.push(new CalendarTileDefiniton(lands, calG, 2, 1, 1));
    calendarTileDefs.push(new CalendarTileDefiniton(portr, favG, 3, 2, 0));
    calendarTileDefs.push(new CalendarTileDefiniton(portr, calG, 3, 2, 1));
    calendarTileDefs.push(new CalendarTileDefiniton(portr, calG, 3, 2, 2));
    calendarTileDefs.push(new CalendarTileDefiniton(portr, calG, 3, 1, 3));
    _results = [];
    for (_i = 0, _len = calendarTileDefs.length; _i < _len; _i++) {
      ctd = calendarTileDefs[_i];
      if (!((onlyAddToGroupIdx != null) && (onlyAddToGroupIdx !== ctd.groupIdx))) {
        tileBasics = new TileBasics(this.tileColours.getNextColour(), ctd.colSpan, ctd.rowSpan, null, "", "calendar", ctd.visibility, this.tileTiers.getTileContainerSelector(tierIdx));
        tile = new CalendarTile(tileBasics, this.calendarUrl, ctd.calDayIndex);
        _results.push(this.tileTiers.addTileToTierGroup(tierIdx, ctd.groupIdx, tile));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  WallTabApp.prototype.setupClockAndCalendar = function(bFavouritesOnly) {
    if (bFavouritesOnly) {
      this.addClock(this.favouritesTierIdx, this.favouritesGroupIdx);
      return this.addCalendar(this.calendarTierIdx);
    } else {
      this.addClock(this.favouritesTierIdx, this.favouritesGroupIdx);
      return this.addCalendar(this.calendarTierIdx, this.favouritesGroupIdx);
    }
  };

  WallTabApp.prototype.makeUriButton = function(tierIdx, groupIdx, name, iconname, uri, colSpan, rowSpan, visibility) {
    var tile, tileBasics;
    if (visibility == null) {
      visibility = "all";
    }
    tileBasics = new TileBasics(this.tileColours.getNextColour(), colSpan, rowSpan, "testCommand", uri, name, visibility, this.tileTiers.getTileContainerSelector(tierIdx));
    tile = new SceneButton(tileBasics, iconname, name);
    return this.tileTiers.addTileToTierGroup(tierIdx, groupIdx, tile);
  };

  WallTabApp.prototype.makeSceneButton = function(tierIdx, groupIdx, name, uri, visibility) {
    var tile, tileBasics;
    if (visibility == null) {
      visibility = "all";
    }
    tileBasics = new TileBasics(this.tileColours.getNextColour(), 1, 1, this.automationServer.executeCommand, uri, name, visibility, this.tileTiers.getTileContainerSelector(tierIdx));
    tile = new SceneButton(tileBasics, "bulb-on", name);
    return this.tileTiers.addTileToTierGroup(tierIdx, groupIdx, tile);
  };

  WallTabApp.prototype.automationServerReadyCb = function(actions, serverType) {
    if (this.checkActionGroupsChanged(this.automationActionGroups, actions)) {
      this.automationActionGroups = actions;
      return this.updateUIWithActionGroups();
    }
  };

  WallTabApp.prototype.checkActionGroupsChanged = function(oldActionMap, newActionMap) {
    var newActions, oldActions, servType;
    if (Object.keys(oldActionMap).length !== Object.keys(newActionMap).length) {
      return true;
    }
    for (servType in oldActionMap) {
      oldActions = oldActionMap[servType];
      if (!(servType in newActionMap)) {
        return true;
      }
      newActions = newActionMap[servType];
      if (this.checkActionsForServer(oldActions, newActions)) {
        return true;
      }
    }
    return false;
  };

  WallTabApp.prototype.checkActionsForServer = function(oldActions, newActions) {
    var j, k, newAction, oldAction, v, _i, _ref;
    if (oldActions.length !== newActions.length) {
      return true;
    }
    for (j = _i = 0, _ref = oldActions.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; j = 0 <= _ref ? ++_i : --_i) {
      oldAction = oldActions[j];
      newAction = newActions[j];
      if (Object.keys(oldAction).length !== Object.keys(newAction).length) {
        return true;
      }
      for (k in oldAction) {
        v = oldAction[k];
        if (!k in newAction) {
          return true;
        }
        if (v !== newAction[k]) {
          return true;
        }
      }
    }
    return false;
  };

  WallTabApp.prototype.updateUIWithActionGroups = function() {
    var action, actionList, groupIdx, servType, _i, _len, _ref;
    this.tileTiers.clear();
    this.setupClockAndCalendar(false);
    _ref = this.automationActionGroups;
    for (servType in _ref) {
      actionList = _ref[servType];
      for (_i = 0, _len = actionList.length; _i < _len; _i++) {
        action = actionList[_i];
        groupIdx = this.sceneGroupIdx;
        if (action.groupName !== "") {
          if (action.groupName in this.uiGroupMapping) {
            groupIdx = this.uiGroupMapping[action.groupName];
          } else {
            groupIdx = this.tileTiers.addGroup(this.sceneTierIdx, action.groupName);
            this.uiGroupMapping[action.groupName] = groupIdx;
          }
        }
        this.makeSceneButton(this.sceneTierIdx, groupIdx, action.actionName, action.actionUrl);
      }
    }
    this.applyJsonConfig(this.jsonConfig);
    return this.tileTiers.reDoLayout();
  };

  WallTabApp.prototype.applyJsonConfig = function(jsonConfig) {
    var existingTile, favouriteDefn, _i, _len, _ref, _results;
    this.tileTiers.clearGroup(this.favouritesTierIdx, this.favouritesGroupIdx);
    this.setupClockAndCalendar(true);
    if ("favourites" in jsonConfig) {
      _ref = jsonConfig.favourites;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        favouriteDefn = _ref[_i];
        existingTile = this.tileTiers.findExistingTile(this.favouritesTierIdx, favouriteDefn.tileName);
        if (existingTile !== null) {
          _results.push(this.makeSceneButton(this.favouritesTierIdx, this.favouritesGroupIdx, favouriteDefn.tileName, existingTile.tileBasics.clickParam));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    }
  };

  WallTabApp.prototype.configReadyCb = function(jsonConfig) {
    this.jsonConfig = jsonConfig;
    this.applyJsonConfig(this.jsonConfig);
    return this.tileTiers.reDoLayout();
  };

  WallTabApp.prototype.actionOnUserIdle = function() {
    return $("html, body").animate({
      scrollLeft: "0px"
    });
  };

  return WallTabApp;

})();
