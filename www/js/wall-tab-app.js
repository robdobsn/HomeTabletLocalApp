// Generated by CoffeeScript 1.7.1
var WallTabApp,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

WallTabApp = (function() {
  function WallTabApp() {
    this.actionOnUserIdle = __bind(this.actionOnUserIdle, this);
    this.automationManagerReadyCb = __bind(this.automationManagerReadyCb, this);
    this.tabletConfigReadyCb = __bind(this.tabletConfigReadyCb, this);
    this.defaultTabletName = "tabdefault";
    this.hoursBetweenActionUpdates = 12;
    this.minsBetweenEventLogChecks = 1;
    this.maxEventsPerLogSend = 50;
    this.mediaPlayHelper = new MediaPlayHelper({
      "click": "assets/click.mp3",
      "ok": "assets/blip.mp3",
      "fail": "assets/fail-doh.mp3"
    });
    this.tileColours = new TileColours;
    return;
  }

  WallTabApp.prototype.getLogServerUrl = function() {
    return LocalStorage.get("ConfigServerUrl") + "/log";
  };

  WallTabApp.prototype.go = function() {
    this.userIdleCatcher = new UserIdleCatcher(90, this.actionOnUserIdle);
    this.tabletConfigManager = new TabletConfigManager(this.defaultTabletName);
    this.tabletConfigManager.setReadyCallback(this.tabletConfigReadyCb);
    this.automationManager = new AutomationManager(this, this.automationManagerReadyCb);
    this.calendarManager = new CalendarManager(this);
    this.appPages = new AppPages(this, "#sqWrapper", this.automationManager);
    $(window).on('orientationchange', (function(_this) {
      return function() {
        return _this.buildAndDisplayUI();
      };
    })(this));
    $(window).on('resize', (function(_this) {
      return function() {
        return _this.buildAndDisplayUI();
      };
    })(this));
    this.checkEventLogs();
    setInterval((function(_this) {
      return function() {
        return _this.checkEventLogs();
      };
    })(this), this.minsBetweenEventLogChecks * 60 * 1000);
    this.requestConfigData();
    setInterval((function(_this) {
      return function() {
        return _this.requestConfigData();
      };
    })(this), this.hoursBetweenActionUpdates * 60 * 60 * 1000);
  };

  WallTabApp.prototype.requestConfigData = function() {
    return this.tabletConfigManager.requestConfig();
  };

  WallTabApp.prototype.tabletConfigReadyCb = function() {
    var configData;
    configData = this.tabletConfigManager.getConfigData();
    if ((configData.common != null) && (configData.common.calendar != null)) {
      this.calendarManager.setConfig(configData.common.calendar);
    }
    return this.automationManager.requestUpdate(configData);
  };

  WallTabApp.prototype.automationManagerReadyCb = function(hasChanged) {
    if (hasChanged) {
      return this.buildAndDisplayUI();
    }
  };

  WallTabApp.prototype.buildAndDisplayUI = function() {
    this.appPages.build(this.automationManager.getActionGroups());
    return this.appPages.display();
  };

  WallTabApp.prototype.actionOnUserIdle = function() {
    this.appPages.userIsIdle();
  };

  WallTabApp.prototype.checkEventLogs = function() {
    var ev, evList, evListJson, i, logCat, logCats, _i, _j, _len, _ref;
    evList = [];
    logCats = ["CalLog", "IndLog", "CnfLog"];
    for (_i = 0, _len = logCats.length; _i < _len; _i++) {
      logCat = logCats[_i];
      for (i = _j = 0, _ref = this.maxEventsPerLogSend; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
        ev = LocalStorage.getEvent(logCat);
        if (ev != null) {
          console.log("Logging event from " + logCat + " = " + JSON.stringify(ev));
          evList.push({
            logCat: logCat,
            timestamp: ev.timestamp,
            eventText: ev.eventText
          });
        } else {
          break;
        }
      }
    }
    if (evList.length > 0) {
      evListJson = JSON.stringify(evList);
      console.log("Sending " + evList.length + " log event(s) to log server");
      $.ajax({
        url: this.getLogServerUrl(),
        type: 'POST',
        data: evListJson,
        contentType: "application/json",
        success: (function(_this) {
          return function(data, status, response) {
            console.log("logged events success");
          };
        })(this),
        error: (function(_this) {
          return function(jqXHR, textStatus, errorThrown) {
            var _k, _len1;
            console.log("Error log failed: " + textStatus + " " + errorThrown);
            for (_k = 0, _len1 = evList.length; _k < _len1; _k++) {
              ev = evList[_k];
              LocalStorage.logEvent(ev.logCat, ev.eventText, ev.timestamp);
            }
          };
        })(this)
      });
    }
  };

  return WallTabApp;

})();
