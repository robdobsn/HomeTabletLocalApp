// Generated by CoffeeScript 1.12.7
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  App.AppPages = (function() {
    function AppPages(app, parentTag, automationManager) {
      this.app = app;
      this.parentTag = parentTag;
      this.automationManager = automationManager;
      this.buttonCallback = bind(this.buttonCallback, this);
      this.curPageDef = {
        "pageName": ""
      };
      this.generatedPage = {};
      this.defaultPageName = "";
      this.curTabPage = null;
      $("body").prepend("<div id=\"sqWrapper\">\n</div>");
    }

    AppPages.prototype.userIsIdle = function() {
      var autoDim;
      autoDim = App.LocalStorage.get("AutoDim");
      if ((autoDim != null) && autoDim) {
        if (this.setCurrentPage("DimDisplay")) {
          this.display();
          return;
        }
      }
      if (this.curPageDef.pageName !== this.defaultPageName) {
        this.setCurrentPage(this.defaultPageName);
        this.display();
      }
    };

    AppPages.prototype.setCurrentPage = function(pageName, forceSet) {
      var tabConfig;
      tabConfig = this.app.tabletConfigManager.getConfigData();
      if ((tabConfig.common != null) && (tabConfig.common.pages != null)) {
        if (pageName in tabConfig.common.pages) {
          if (forceSet || (this.curPageDef.pageName !== pageName)) {
            this.curPageDef = tabConfig.common.pages[pageName];
            return true;
          }
        } else if (forceSet || ((this.generatedPage.pageName != null) && this.generatedPage.pageName === pageName)) {
          this.curPageDef = this.generatedPage;
          return true;
        }
      }
      return false;
    };

    AppPages.prototype.build = function(automationActionGroups) {
      this.automationActionGroups = automationActionGroups;
      return this.rebuild(true);
    };

    AppPages.prototype.rebuild = function(forceSetInitialPage) {
      var i, len, pageDef, pageName, ref, ref1, results, tabConfig, tile;
      tabConfig = this.app.tabletConfigManager.getConfigData();
      if ((tabConfig.common != null) && (tabConfig.common.pages != null)) {
        ref = tabConfig.common.pages;
        results = [];
        for (pageName in ref) {
          pageDef = ref[pageName];
          if ((pageDef.defaultPage != null) && pageDef.defaultPage) {
            if (forceSetInitialPage) {
              this.setCurrentPage(pageName, true);
            }
            this.defaultPageName = pageName;
          }
          pageDef.tiles = [];
          if (pageDef.tilesFixed != null) {
            ref1 = pageDef.tilesFixed;
            for (i = 0, len = ref1.length; i < len; i++) {
              tile = ref1[i];
              pageDef.tiles.push(tile);
            }
          }
          results.push(this.generatePageContents(pageDef, tabConfig));
        }
        return results;
      }
    };

    AppPages.prototype.generatePageContents = function(pageDef, tabletSpecificConfig) {
      var favFound, favList, i, j, k, l, len, len1, len10, len11, len12, len2, len3, len4, len5, len6, len7, len8, len9, m, n, newTile, o, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, s, source, sourceList, t, tile, tileGen, tileList, tileSource, u, uniqList, val;
      tileList = [];
      uniqList = [];
      if (!("tileGen" in pageDef)) {
        return;
      }
      ref = pageDef.tileGen;
      for (i = 0, len = ref.length; i < len; i++) {
        tileGen = ref[i];
        sourceList = [];
        if ("tileSources" in tileGen) {
          sourceList = (function() {
            var j, len1, ref1, results;
            ref1 = tileGen.tileSources;
            results = [];
            for (j = 0, len1 = ref1.length; j < len1; j++) {
              source = ref1[j];
              if (source in this.automationActionGroups) {
                results.push(source);
              }
            }
            return results;
          }).call(this);
        } else {
          sourceList = (function() {
            var ref1, results;
            ref1 = this.automationActionGroups;
            results = [];
            for (source in ref1) {
              val = ref1[source];
              results.push(source);
            }
            return results;
          }).call(this);
        }
        if (tileGen.tileMult === "unique") {
          for (j = 0, len1 = sourceList.length; j < len1; j++) {
            tileSource = sourceList[j];
            ref1 = this.automationActionGroups[tileSource];
            for (k = 0, len2 = ref1.length; k < len2; k++) {
              tile = ref1[k];
              if (tileGen.tileSelect in tile) {
                if (ref2 = tile[tileGen.tileSelect], indexOf.call(uniqList, ref2) < 0) {
                  newTile = this.generateTileInfo(tileGen, tile);
                  tileList.push(newTile);
                  uniqList.push(newTile[tileGen.tileSelect]);
                }
              }
            }
          }
        } else if ("tileFilterValFrom" in tileGen) {
          for (l = 0, len3 = sourceList.length; l < len3; l++) {
            tileSource = sourceList[l];
            ref3 = this.automationActionGroups[tileSource];
            for (m = 0, len4 = ref3.length; m < len4; m++) {
              tile = ref3[m];
              if (tileGen.tileSelect in tile) {
                if (tile[tileGen.tileSelect] === pageDef[tileGen.tileFilterValFrom]) {
                  newTile = this.generateTileInfo(tileGen, tile);
                  tileList.push(newTile);
                }
              }
            }
          }
        } else if ("tabConfigFavListName" in tileGen && tileGen.tabConfigFavListName in tabletSpecificConfig) {
          ref4 = tabletSpecificConfig[tileGen.tabConfigFavListName];
          for (n = 0, len5 = ref4.length; n < len5; n++) {
            favList = ref4[n];
            favFound = false;
            for (o = 0, len6 = sourceList.length; o < len6; o++) {
              tileSource = sourceList[o];
              ref5 = this.automationActionGroups[tileSource];
              for (p = 0, len7 = ref5.length; p < len7; p++) {
                tile = ref5[p];
                if (tileGen.tileSelect in tile) {
                  if (tile[tileGen.tileSelect] === favList[tileGen.tileSelect] && tile[tileGen.tileNameFrom] === favList.tileName) {
                    newTile = this.generateTileInfo(tileGen, tile);
                    if ("tileText" in favList) {
                      newTile.tileText = favList.tileText;
                    }
                    tileList.push(newTile);
                    favFound = true;
                    break;
                  }
                }
              }
              if (favFound) {
                break;
              }
            }
          }
        } else if ("tileFilterVal" in tileGen) {
          for (q = 0, len8 = sourceList.length; q < len8; q++) {
            tileSource = sourceList[q];
            ref6 = this.automationActionGroups[tileSource];
            for (r = 0, len9 = ref6.length; r < len9; r++) {
              tile = ref6[r];
              if (tileGen.tileSelect in tile) {
                if (tile[tileGen.tileSelect] === tileGen.tileFilterVal) {
                  if ("tileNameSelect" in tileGen) {
                    if (tile[tileGenInfo.tileNameFrom] === tileGen.tileNameSelect) {
                      newTile = this.generateTileInfo(tileGen, tile);
                      tileList.push(newTile);
                    }
                  } else {
                    newTile = this.generateTileInfo(tileGen, tile);
                    tileList.push(newTile);
                  }
                }
              }
            }
          }
        } else {
          for (s = 0, len10 = sourceList.length; s < len10; s++) {
            tileSource = sourceList[s];
            ref7 = this.automationActionGroups[tileSource];
            for (t = 0, len11 = ref7.length; t < len11; t++) {
              tile = ref7[t];
              newTile = this.generateTileInfo(tileGen, tile);
              tileList.push(newTile);
            }
          }
        }
      }
      if ("tileSort" in tileGen) {
        tileList.sort((function(_this) {
          return function(a, b) {
            if (a[tileGen.tileSort] < b[tileGen.tileSort]) {
              return -1;
            }
            if (a[tileGen.tileSort] > b[tileGen.tileSort]) {
              return 1;
            }
            return 0;
          };
        })(this));
      }
      for (u = 0, len12 = tileList.length; u < len12; u++) {
        tile = tileList[u];
        pageDef.tiles.push(tile);
      }
    };

    AppPages.prototype.generateTileInfo = function(tileGenInfo, tile) {
      var key, newTile, val;
      newTile = {};
      for (key in tile) {
        val = tile[key];
        newTile[key] = val;
      }
      newTile.tileType = tileGenInfo.tileType;
      newTile.pageMode = "pageMode" in tileGenInfo ? tileGenInfo.pageMode : "";
      newTile.tileMode = "tileMode" in tileGenInfo ? tileGenInfo.tileMode : "";
      newTile.tileName = tile[tileGenInfo.tileNameFrom];
      newTile.colType = tileGenInfo.colType != null ? tileGenInfo.colType : "";
      newTile.url = "urlFrom" in tileGenInfo ? tile[tileGenInfo.urlFrom] : ("url" in tileGenInfo ? newTile.url = tileGenInfo.url : void 0);
      if (tileGenInfo.pageGenRule != null) {
        newTile.pageGenRule = tileGenInfo.pageGenRule;
      }
      if (tileGenInfo.rowSpan != null) {
        newTile.rowSpan = tileGenInfo.rowSpan;
      }
      if (tileGenInfo.colSpan != null) {
        newTile.colSpan = tileGenInfo.colSpan;
      }
      newTile.tileText = tile[tileGenInfo.tileTextFrom];
      if ("iconName" in tileGenInfo) {
        newTile.iconName = tileGenInfo.iconName;
      }
      return newTile;
    };

    AppPages.prototype.generateNewPage = function(context) {
      var col, i, j, k, len, len1, len2, pageGen, ref, ref1, ref2, tabConfig, tile, tileGen;
      tabConfig = this.app.tabletConfigManager.getConfigData();
      if ((context.pageGenRule != null) && context.pageGenRule !== "") {
        if (context.pageGenRule in tabConfig.common.pageGen) {
          pageGen = tabConfig.common.pageGen[context.pageGenRule];
          this.generatedPage = {
            "pageName": "pageNameFrom" in pageGen ? context[pageGen.pageNameFrom] : pageGen.pageName,
            "pageTitle": "pageTitleFrom" in pageGen ? context[pageGen.pageTitleFrom] : pageGen.pageTitle,
            "columns": pageGen.columns,
            "tiles": (function() {
              var i, len, ref, results;
              ref = pageGen.tilesFixed;
              results = [];
              for (i = 0, len = ref.length; i < len; i++) {
                tile = ref[i];
                results.push(tile);
              }
              return results;
            })(),
            "tileGen": (function() {
              var i, len, ref, results;
              ref = pageGen.tileGen;
              results = [];
              for (i = 0, len = ref.length; i < len; i++) {
                tileGen = ref[i];
                results.push(tileGen);
              }
              return results;
            })()
          };
          if ("tileModeFrom" in pageGen) {
            ref = this.generatedPage.tileGen;
            for (i = 0, len = ref.length; i < len; i++) {
              tileGen = ref[i];
              tileGen.tileMode = context[pageGen.tileModeFrom];
            }
          }
          ref1 = this.generatedPage.columns.landscape;
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            col = ref1[j];
            if (col.titleGen != null) {
              col.title = this.generatedPage[col.titleGen];
            }
          }
          ref2 = this.generatedPage.columns.portrait;
          for (k = 0, len2 = ref2.length; k < len2; k++) {
            col = ref2[k];
            if (col.titleGen != null) {
              col.title = this.generatedPage[col.titleGen];
            }
          }
          this.generatePageContents(this.generatedPage, tabConfig);
          return this.generatedPage.pageName;
        }
      }
      return "";
    };

    AppPages.prototype.display = function() {
      this.curTabPage = new App.TabPage(this.app, this.parentTag, this.curPageDef, this.buttonCallback);
      return this.curTabPage.updateDom();
    };

    AppPages.prototype.buttonCallback = function(context) {
      var newPageName;
      if ((context.forceReloadPages != null) && context.forceReloadPages) {
        this.app.requestConfigData();
      }
      if ("tileMode" in context && context.tileMode === "SelFavs") {
        this.addFavouriteButton(context);
        this.setCurrentPage(this.defaultPageName, false);
        this.display();
      } else if (indexOf.call(context.url, "/") >= 0) {
        this.automationManager.executeCommand(context.url);
      } else if (indexOf.call(context.url, "~") >= 0) {
        if (this.curTabPage != null) {
          this.curTabPage.handlePageNav(context.url);
        }
      } else if (this.setCurrentPage(context.url, false)) {
        this.display();
      } else if (context.url === "DelFav") {
        this.deleteFavouriteButton(context);
        this.setCurrentPage(this.defaultPageName, false);
        this.display();
      } else if (context.url === "ExitYes") {
        navigator.app.exitApp();
      } else {
        console.log("WallTabletDebug Attempting page generation " + context.url);
        newPageName = this.generateNewPage(context);
        this.setCurrentPage(newPageName, false);
        this.display();
      }
    };

    AppPages.prototype.addFavouriteButton = function(context) {
      this.app.tabletConfigManager.addFavouriteButton(context);
      return this.rebuild(false);
    };

    AppPages.prototype.deleteFavouriteButton = function(context) {
      this.app.tabletConfigManager.deleteFavouriteButton(context);
      return this.rebuild(false);
    };

    return AppPages;

  })();

}).call(this);

//# sourceMappingURL=app-pages.js.map
