// Generated by CoffeeScript 1.7.1
var AppPages,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

AppPages = (function() {
  function AppPages(app, parentTag, automationManager) {
    this.app = app;
    this.parentTag = parentTag;
    this.automationManager = automationManager;
    this.buttonCallback = __bind(this.buttonCallback, this);
    this.curPageDef = {
      "pageName": ""
    };
    this.generatedPage = {};
    this.defaultPageName = "";
    this.curTabPage = null;
    $("body").prepend("<div id=\"sqWrapper\">\n</div>");
  }

  AppPages.prototype.userIsIdle = function() {
    var autoDim;
    autoDim = LocalStorage.get("AutoDim");
    if ((autoDim != null) && autoDim) {
      if (this.setCurrentPage("DimDisplay")) {
        this.display();
        return;
      }
    }
    if (this.curPageDef.pageName !== this.defaultPageName) {
      this.setCurrentPage(this.defaultPageName);
      this.display();
    }
  };

  AppPages.prototype.setCurrentPage = function(pageName, forceSet) {
    var tabConfig;
    tabConfig = this.app.tabletConfigManager.getConfigData();
    if ((tabConfig.common != null) && (tabConfig.common.pages != null)) {
      if (pageName in tabConfig.common.pages) {
        if (forceSet || (this.curPageDef.pageName !== pageName)) {
          this.curPageDef = tabConfig.common.pages[pageName];
          return true;
        }
      } else if (forceSet || ((this.generatedPage.pageName != null) && this.generatedPage.pageName === pageName)) {
        this.curPageDef = this.generatedPage;
        return true;
      }
    }
    return false;
  };

  AppPages.prototype.build = function(automationActionGroups) {
    this.automationActionGroups = automationActionGroups;
    return this.rebuild(true);
  };

  AppPages.prototype.rebuild = function(forceSetInitialPage) {
    var pageDef, pageName, tabConfig, tile, _i, _len, _ref, _ref1, _results;
    tabConfig = this.app.tabletConfigManager.getConfigData();
    if ((tabConfig.common != null) && (tabConfig.common.pages != null)) {
      _ref = tabConfig.common.pages;
      _results = [];
      for (pageName in _ref) {
        pageDef = _ref[pageName];
        if ((pageDef.defaultPage != null) && pageDef.defaultPage) {
          if (forceSetInitialPage) {
            this.setCurrentPage(pageName, true);
          }
          this.defaultPageName = pageName;
        }
        pageDef.tiles = [];
        if (pageDef.tilesFixed != null) {
          _ref1 = pageDef.tilesFixed;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            tile = _ref1[_i];
            pageDef.tiles.push(tile);
          }
        }
        _results.push(this.generatePageContents(pageDef, tabConfig));
      }
      return _results;
    }
  };

  AppPages.prototype.generatePageContents = function(pageDef, tabletSpecificConfig) {
    var favFound, favList, newTile, source, sourceList, tile, tileGen, tileList, tileSource, uniqList, val, _i, _j, _k, _l, _len, _len1, _len10, _len11, _len12, _len2, _len3, _len4, _len5, _len6, _len7, _len8, _len9, _m, _n, _o, _p, _q, _r, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _s, _t, _u;
    tileList = [];
    uniqList = [];
    if (!("tileGen" in pageDef)) {
      return;
    }
    _ref = pageDef.tileGen;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tileGen = _ref[_i];
      sourceList = [];
      if ("tileSources" in tileGen) {
        sourceList = (function() {
          var _j, _len1, _ref1, _results;
          _ref1 = tileGen.tileSources;
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            source = _ref1[_j];
            if (source in this.automationActionGroups) {
              _results.push(source);
            }
          }
          return _results;
        }).call(this);
      } else {
        sourceList = (function() {
          var _ref1, _results;
          _ref1 = this.automationActionGroups;
          _results = [];
          for (source in _ref1) {
            val = _ref1[source];
            _results.push(source);
          }
          return _results;
        }).call(this);
      }
      if (tileGen.tileMult === "unique") {
        for (_j = 0, _len1 = sourceList.length; _j < _len1; _j++) {
          tileSource = sourceList[_j];
          _ref1 = this.automationActionGroups[tileSource];
          for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
            tile = _ref1[_k];
            if (tileGen.tileSelect in tile) {
              if (_ref2 = tile[tileGen.tileSelect], __indexOf.call(uniqList, _ref2) < 0) {
                newTile = this.generateTileInfo(tileGen, tile);
                tileList.push(newTile);
                uniqList.push(newTile[tileGen.tileSelect]);
              }
            }
          }
        }
      } else if ("tileFilterValFrom" in tileGen) {
        for (_l = 0, _len3 = sourceList.length; _l < _len3; _l++) {
          tileSource = sourceList[_l];
          _ref3 = this.automationActionGroups[tileSource];
          for (_m = 0, _len4 = _ref3.length; _m < _len4; _m++) {
            tile = _ref3[_m];
            if (tileGen.tileSelect in tile) {
              if (tile[tileGen.tileSelect] === pageDef[tileGen.tileFilterValFrom]) {
                newTile = this.generateTileInfo(tileGen, tile);
                tileList.push(newTile);
              }
            }
          }
        }
      } else if ("tabConfigFavListName" in tileGen && tileGen.tabConfigFavListName in tabletSpecificConfig) {
        _ref4 = tabletSpecificConfig[tileGen.tabConfigFavListName];
        for (_n = 0, _len5 = _ref4.length; _n < _len5; _n++) {
          favList = _ref4[_n];
          favFound = false;
          for (_o = 0, _len6 = sourceList.length; _o < _len6; _o++) {
            tileSource = sourceList[_o];
            _ref5 = this.automationActionGroups[tileSource];
            for (_p = 0, _len7 = _ref5.length; _p < _len7; _p++) {
              tile = _ref5[_p];
              if (tileGen.tileSelect in tile) {
                if (tile[tileGen.tileSelect] === favList[tileGen.tileSelect] && tile[tileGen.tileNameFrom] === favList.tileName) {
                  newTile = this.generateTileInfo(tileGen, tile);
                  if ("tileText" in favList) {
                    newTile.tileText = favList.tileText;
                  }
                  tileList.push(newTile);
                  favFound = true;
                  break;
                }
              }
            }
            if (favFound) {
              break;
            }
          }
        }
      } else if ("tileFilterVal" in tileGen) {
        for (_q = 0, _len8 = sourceList.length; _q < _len8; _q++) {
          tileSource = sourceList[_q];
          _ref6 = this.automationActionGroups[tileSource];
          for (_r = 0, _len9 = _ref6.length; _r < _len9; _r++) {
            tile = _ref6[_r];
            if (tileGen.tileSelect in tile) {
              if (tile[tileGen.tileSelect] === tileGen.tileFilterVal) {
                if ("tileNameSelect" in tileGen) {
                  if (tile[tileGenInfo.tileNameFrom] === tileGen.tileNameSelect) {
                    newTile = this.generateTileInfo(tileGen, tile);
                    tileList.push(newTile);
                  }
                } else {
                  newTile = this.generateTileInfo(tileGen, tile);
                  tileList.push(newTile);
                }
              }
            }
          }
        }
      } else {
        for (_s = 0, _len10 = sourceList.length; _s < _len10; _s++) {
          tileSource = sourceList[_s];
          _ref7 = this.automationActionGroups[tileSource];
          for (_t = 0, _len11 = _ref7.length; _t < _len11; _t++) {
            tile = _ref7[_t];
            newTile = this.generateTileInfo(tileGen, tile);
            tileList.push(newTile);
          }
        }
      }
    }
    if ("tileSort" in tileGen) {
      tileList.sort((function(_this) {
        return function(a, b) {
          if (a[tileGen.tileSort] < b[tileGen.tileSort]) {
            return -1;
          }
          if (a[tileGen.tileSort] > b[tileGen.tileSort]) {
            return 1;
          }
          return 0;
        };
      })(this));
    }
    for (_u = 0, _len12 = tileList.length; _u < _len12; _u++) {
      tile = tileList[_u];
      pageDef.tiles.push(tile);
    }
  };

  AppPages.prototype.generateTileInfo = function(tileGenInfo, tile) {
    var key, newTile, val;
    newTile = {};
    for (key in tile) {
      val = tile[key];
      newTile[key] = val;
    }
    newTile.tileType = tileGenInfo.tileType;
    newTile.pageMode = "pageMode" in tileGenInfo ? tileGenInfo.pageMode : "";
    newTile.tileMode = "tileMode" in tileGenInfo ? tileGenInfo.tileMode : "";
    newTile.tileName = tile[tileGenInfo.tileNameFrom];
    newTile.colType = tileGenInfo.colType != null ? tileGenInfo.colType : "";
    newTile.url = "urlFrom" in tileGenInfo ? tile[tileGenInfo.urlFrom] : ("url" in tileGenInfo ? newTile.url = tileGenInfo.url : void 0);
    if (tileGenInfo.pageGenRule != null) {
      newTile.pageGenRule = tileGenInfo.pageGenRule;
    }
    if (tileGenInfo.rowSpan != null) {
      newTile.rowSpan = tileGenInfo.rowSpan;
    }
    if (tileGenInfo.colSpan != null) {
      newTile.colSpan = tileGenInfo.colSpan;
    }
    newTile.tileText = tile[tileGenInfo.tileTextFrom];
    if ("iconName" in tileGenInfo) {
      newTile.iconName = tileGenInfo.iconName;
    }
    return newTile;
  };

  AppPages.prototype.generateNewPage = function(context) {
    var col, pageGen, tabConfig, tile, tileGen, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
    tabConfig = this.app.tabletConfigManager.getConfigData();
    if ((context.pageGenRule != null) && context.pageGenRule !== "") {
      if (context.pageGenRule in tabConfig.common.pageGen) {
        pageGen = tabConfig.common.pageGen[context.pageGenRule];
        this.generatedPage = {
          "pageName": "pageNameFrom" in pageGen ? context[pageGen.pageNameFrom] : pageGen.pageName,
          "pageTitle": "pageTitleFrom" in pageGen ? context[pageGen.pageTitleFrom] : pageGen.pageTitle,
          "columns": pageGen.columns,
          "tiles": (function() {
            var _i, _len, _ref, _results;
            _ref = pageGen.tilesFixed;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              tile = _ref[_i];
              _results.push(tile);
            }
            return _results;
          })(),
          "tileGen": (function() {
            var _i, _len, _ref, _results;
            _ref = pageGen.tileGen;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              tileGen = _ref[_i];
              _results.push(tileGen);
            }
            return _results;
          })()
        };
        if ("tileModeFrom" in pageGen) {
          _ref = this.generatedPage.tileGen;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            tileGen = _ref[_i];
            tileGen.tileMode = context[pageGen.tileModeFrom];
          }
        }
        _ref1 = this.generatedPage.columns.landscape;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          col = _ref1[_j];
          if (col.titleGen != null) {
            col.title = this.generatedPage[col.titleGen];
          }
        }
        _ref2 = this.generatedPage.columns.portrait;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          col = _ref2[_k];
          if (col.titleGen != null) {
            col.title = this.generatedPage[col.titleGen];
          }
        }
        this.generatePageContents(this.generatedPage, tabConfig);
        return this.generatedPage.pageName;
      }
    }
    return "";
  };

  AppPages.prototype.display = function() {
    this.curTabPage = new TabPage(this.app, this.parentTag, this.curPageDef, this.buttonCallback);
    return this.curTabPage.updateDom();
  };

  AppPages.prototype.buttonCallback = function(context) {
    var newPageName;
    if ((context.forceReloadPages != null) && context.forceReloadPages) {
      this.app.requestConfigData();
    }
    if ("tileMode" in context && context.tileMode === "SelFavs") {
      this.addFavouriteButton(context);
      this.setCurrentPage(this.defaultPageName, false);
      this.display();
    } else if (__indexOf.call(context.url, "/") >= 0) {
      this.automationManager.executeCommand(context.url);
    } else if (__indexOf.call(context.url, "~") >= 0) {
      if (this.curTabPage != null) {
        this.curTabPage.handlePageNav(context.url);
      }
    } else if (this.setCurrentPage(context.url, false)) {
      this.display();
    } else if (context.url === "DelFav") {
      this.deleteFavouriteButton(context);
      this.setCurrentPage(this.defaultPageName, false);
      this.display();
    } else if (context.url === "ExitYes") {
      navigator.app.exitApp();
    } else {
      console.log("Attempting page generation " + context.url);
      newPageName = this.generateNewPage(context);
      this.setCurrentPage(newPageName, false);
      this.display();
    }
  };

  AppPages.prototype.addFavouriteButton = function(context) {
    this.app.tabletConfigManager.addFavouriteButton(context);
    return this.rebuild(false);
  };

  AppPages.prototype.deleteFavouriteButton = function(context) {
    this.app.tabletConfigManager.deleteFavouriteButton(context);
    return this.rebuild(false);
  };

  return AppPages;

})();
