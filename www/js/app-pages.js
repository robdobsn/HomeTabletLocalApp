// Generated by CoffeeScript 1.8.0
var AppPages,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

AppPages = (function() {
  function AppPages(parentTag, defaultActionFn, mediaPlayHelper) {
    this.parentTag = parentTag;
    this.defaultActionFn = defaultActionFn;
    this.mediaPlayHelper = mediaPlayHelper;
    this.buttonCallback = __bind(this.buttonCallback, this);
    this.curPage = {
      "pageName": ""
    };
    this.tabletConfig = {};
    this.generatedPage = {};
  }

  AppPages.prototype.setCurrentPage = function(pageName, forceSet) {
    if ((this.tabletConfig.common != null) && (this.tabletConfig.common.pages != null)) {
      if (pageName in this.tabletConfig.common.pages) {
        if (forceSet || (this.curPage.pageName !== pageName)) {
          this.curPage = this.tabletConfig.common.pages[pageName];
          return true;
        }
      } else if (forceSet || ((this.generatedPage.pageName != null) && this.generatedPage.pageName === pageName)) {
        this.curPage = this.generatedPage;
        return true;
      }
    }
    return false;
  };

  AppPages.prototype.build = function(tabletConfig, automationActionGroups) {
    var pageDef, pageName, tile, _i, _len, _ref, _ref1, _results;
    this.tabletConfig = tabletConfig;
    this.automationActionGroups = automationActionGroups;
    if ((this.tabletConfig.common != null) && (this.tabletConfig.common.pages != null)) {
      _ref = this.tabletConfig.common.pages;
      _results = [];
      for (pageName in _ref) {
        pageDef = _ref[pageName];
        if ((pageDef.defaultPage != null) && pageDef.defaultPage) {
          this.setCurrentPage(pageName, true);
        }
        pageDef.tiles = [];
        if (pageDef.tilesFixed != null) {
          _ref1 = pageDef.tilesFixed;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            tile = _ref1[_i];
            pageDef.tiles.push(tile);
          }
        }
        _results.push(this.generatePageContents(pageDef, this.tabletConfig));
      }
      return _results;
    }
  };

  AppPages.prototype.generatePageContents = function(pageDef, tabletSpecificConfig) {
    var favList, key, newTile, source, sourceList, tile, tileGen, tileList, tileSource, uniqList, val, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3;
    tileList = [];
    uniqList = [];
    if ("tileGen" in pageDef) {
      _ref = pageDef.tileGen;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tileGen = _ref[_i];
        sourceList = [];
        if ("tileSources" in tileGen) {
          sourceList = (function() {
            var _j, _len1, _ref1, _results;
            _ref1 = tileGen.tileSources;
            _results = [];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              source = _ref1[_j];
              _results.push(source);
            }
            return _results;
          })();
        } else {
          sourceList = (function() {
            var _ref1, _results;
            _ref1 = this.automationActionGroups;
            _results = [];
            for (source in _ref1) {
              val = _ref1[source];
              _results.push(source);
            }
            return _results;
          }).call(this);
        }
        for (_j = 0, _len1 = sourceList.length; _j < _len1; _j++) {
          tileSource = sourceList[_j];
          if (tileSource in this.automationActionGroups) {
            _ref1 = this.automationActionGroups[tileSource];
            for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
              tile = _ref1[_k];
              if (tileGen.tileSelect in tile) {
                newTile = {};
                for (key in tile) {
                  val = tile[key];
                  newTile[key] = val;
                }
                newTile.tileType = tileGen.tileType;
                newTile.tileName = tile[tileGen.tileNameFrom];
                newTile.colType = tileGen.colType != null ? tileGen.colType : "";
                newTile.url = tile[tileGen.urlFrom];
                if (tileGen.pageGenRule != null) {
                  newTile.pageGenRule = tileGen.pageGenRule;
                }
                if (tileGen.rowSpan != null) {
                  newTile.rowSpan = tileGen.rowSpan;
                }
                if (tileGen.colSpan != null) {
                  newTile.colSpan = tileGen.colSpan;
                }
                newTile.tileText = tile[tileGen.tileTextFrom];
                if ("iconName" in tileGen) {
                  newTile.iconName = tileGen.iconName;
                }
                if (tileGen.tileMult === "unique") {
                  if (_ref2 = newTile[tileGen.tileSelect], __indexOf.call(uniqList, _ref2) < 0) {
                    tileList.push(newTile);
                    uniqList.push(newTile[tileGen.tileSelect]);
                  }
                } else if ("tileFilterValFrom" in tileGen) {
                  if (newTile[tileGen.tileSelect] === pageDef[tileGen.tileFilterValFrom]) {
                    tileList.push(newTile);
                  }
                } else if ("tabConfigFavListName" in tileGen) {
                  _ref3 = tabletSpecificConfig[tileGen.tabConfigFavListName];
                  for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
                    favList = _ref3[_l];
                    if (newTile[tileGen.tileSelect] === favList[tileGen.tileSelect]) {
                      if (newTile.tileName === favList.tileName) {
                        tileList.push(newTile);
                      }
                    }
                  }
                } else if ("tileFilterVal" in tileGen) {
                  if (newTile[tileGen.tileSelect] === tileGen.tileFilterVal) {
                    if ("tileNameSelect" in tileGen) {
                      if (newTile.tileName === tileGen.tileNameSelect) {
                        tileList.push(newTile);
                      }
                    } else {
                      tileList.push(newTile);
                    }
                  }
                } else {
                  tileList.push(newTile);
                }
              }
            }
          }
        }
      }
      tileList.sort((function(_this) {
        return function(a, b) {
          if (a[tileGen.tileSort] < b[tileGen.tileSort]) {
            return -1;
          }
          if (a[tileGen.tileSort] > b[tileGen.tileSort]) {
            return 1;
          }
          return 0;
        };
      })(this));
      if (uniqList.length > 0) {
        console.log("UNIQLIST " + JSON.stringify(uniqList));
      } else {
        console.log("TILELIST " + JSON.stringify(tileList));
      }
      for (_m = 0, _len4 = tileList.length; _m < _len4; _m++) {
        tile = tileList[_m];
        pageDef.tiles.push(tile);
      }
    }
    return pageDef;
  };

  AppPages.prototype.generateNewPage = function(context) {
    var col, pageGen, tile, tileGen, _i, _j, _len, _len1, _ref, _ref1;
    if ((context.pageGenRule != null) && context.pageGenRule !== "") {
      if (context.pageGenRule in this.tabletConfig.common.pageGen) {
        pageGen = this.tabletConfig.common.pageGen[context.pageGenRule];
        this.generatedPage = {
          "pageName": context[pageGen.pageNameFrom],
          "pageTitle": context[pageGen.pageTitleFrom],
          "columns": pageGen.columns,
          "tiles": (function() {
            var _i, _len, _ref, _results;
            _ref = pageGen.tilesFixed;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              tile = _ref[_i];
              _results.push(tile);
            }
            return _results;
          })(),
          "tileGen": (function() {
            var _i, _len, _ref, _results;
            _ref = pageGen.tileGen;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              tileGen = _ref[_i];
              _results.push(tileGen);
            }
            return _results;
          })()
        };
        _ref = this.generatedPage.columns.landscape;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          col = _ref[_i];
          if (col.titleGen != null) {
            col.title = this.generatedPage[col.titleGen];
          }
        }
        _ref1 = this.generatedPage.columns.portrait;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          col = _ref1[_j];
          if (col.titleGen != null) {
            col.title = this.generatedPage[col.titleGen];
          }
        }
        this.generatePageContents(this.generatedPage, this.tabletConfig);
        return this.generatedPage.pageName;
      }
    }
    return "";
  };

  AppPages.prototype.display = function() {
    var newPage;
    newPage = new TabPage(this.parentTag, this.curPage, this.buttonCallback);
    return newPage.updateDom();
  };

  AppPages.prototype.buttonCallback = function(context) {
    var newPageName;
    console.log("Pressed " + JSON.stringify(context));
    if (__indexOf.call(context.url, "/") >= 0) {
      this.defaultActionFn(context.url);
    } else {
      if (this.setCurrentPage(context.url, false)) {
        this.display();
      } else {
        console.log("Attempting page generation " + context.url);
        newPageName = this.generateNewPage(context);
        this.setCurrentPage(newPageName, false);
        this.display();
      }
    }
  };

  AppPages.prototype.playClickSound = function() {
    this.mediaPlayHelper.play("click");
  };

  return AppPages;

})();
