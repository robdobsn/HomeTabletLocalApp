{
  "version": 3,
  "file": "app-pages.js",
  "sourceRoot": "..\\..",
  "sources": [
    "www\\js\\app-pages.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "class App.AppPages\r\n\tconstructor: (@app, @parentTag, @automationManager, @VERSION) ->\r\n\t\t@curPageDef = { \"pageName\": \"\" }\r\n\t\t@generatedPage = {}\r\n\t\t@defaultPageName = \"\"\r\n\t\t@curTabPage = null\r\n\t\t# Basic body for DOM\r\n\t\t$(\"body\").prepend \"\"\"\r\n\t\t\t<div id=\"sqWrapper\">\r\n\t\t\t</div>\r\n\t\t\t\"\"\"\r\n\r\n\tuserIsIdle: ->\r\n\t\t# Check for auto-dim\r\n\t\tautoDim = App.LocalStorage.get(\"AutoDim\")\r\n\t\tif autoDim? and autoDim\r\n\t\t\tif @setCurrentPage(\"DimDisplay\")\r\n\t\t\t\t@display()\r\n\t\t\t\treturn\r\n\t\t# Return to home page\r\n\t\tif @curPageDef.pageName isnt @defaultPageName\r\n\t\t\t@setCurrentPage(@defaultPageName)\r\n\t\t\t@display()\r\n\t\treturn\r\n\r\n\tsetCurrentPage: (pageName, forceSet) ->\r\n\t\ttabConfig = @app.tabletConfigManager.getConfigData()\r\n\t\tif tabConfig.common? and tabConfig.common.pages?\r\n\t\t\tif pageName of tabConfig.common.pages\r\n\t\t\t\tif forceSet or (@curPageDef.pageName isnt pageName)\r\n\t\t\t\t\t@curPageDef = tabConfig.common.pages[pageName]\r\n\t\t\t\t\treturn true\r\n\t\t\telse if forceSet or (@generatedPage.pageName? and @generatedPage.pageName is pageName)\r\n\t\t\t\t@curPageDef = @generatedPage\r\n\t\t\t\treturn true\r\n\t\treturn false\r\n\r\n\tbuild: (@automationActionGroups) ->\r\n\t\t@rebuild(true)\r\n\t\treturn\r\n\r\n\trebuild: (forceSetInitialPage) ->\r\n\t\t# Generate pages from data\r\n\t\ttabConfig = @app.tabletConfigManager.getConfigData()\r\n\t\tif tabConfig.common? and tabConfig.common.pages?\r\n\t\t\tfor pageName, pageDef of tabConfig.common.pages\r\n\t\t\t\tif pageDef.defaultPage? and pageDef.defaultPage\r\n\t\t\t\t\tif forceSetInitialPage\r\n\t\t\t\t\t\t@setCurrentPage(pageName, true)\r\n\t\t\t\t\t@defaultPageName = pageName\r\n\t\t\t\tpageDef.tiles = []\r\n\t\t\t\tif pageDef.tilesFixed?\r\n\t\t\t\t\tfor tile in pageDef.tilesFixed\r\n\t\t\t\t\t\tpageDef.tiles.push tile\r\n\t\t\t\t@generatePageContents(pageDef, tabConfig)\r\n\t\treturn\r\n\r\n\tgeneratePageContents: (pageDef, tabletSpecificConfig) ->\r\n\t\ttileList = []\r\n\t\tuniqList = []\r\n\t\t# Tile generators provide metadata to allow tiles to be constructed from\r\n\t\t# tilesources like indigo/fibaro/vera/sonos/blind/door controllers\r\n\t\tif \"tileGen\" not of pageDef\r\n\t\t\treturn\r\n\r\n\t\t# Go through tileGen requirements\r\n\t\tfor tileGen in pageDef.tileGen\r\n\r\n\t\t\t# Check if a specific tile source is specified - otherwise all sources are used\r\n\t\t\tsourceList = []\r\n\t\t\tif \"tileSources\" of tileGen\r\n\t\t\t\tsourceList = (source for source in tileGen.tileSources when source of @automationActionGroups)\r\n\t\t\telse\r\n\t\t\t\tsourceList = (source for source, val of @automationActionGroups)\r\n\r\n\t\t\t# The tileMult \"unique\" is used to select a single tile from\r\n\t\t\t# a tile group - this is for creating menu listing rooms, etc\r\n\t\t\tif tileGen.tileMult is \"unique\"\r\n\t\t\t\t# Iterate tiles in the tile sources\r\n\t\t\t\tfor tileSource in sourceList\r\n\t\t\t\t\tfor tile in @automationActionGroups[tileSource]\r\n\t\t\t\t\t\tif tileGen.tileSelect of tile\r\n\t\t\t\t\t\t\tif tile[tileGen.tileSelect] not in uniqList\r\n\t\t\t\t\t\t\t\tnewTile = @generateTileInfo(tileGen, tile)\r\n\t\t\t\t\t\t\t\ttileList.push newTile\r\n\t\t\t\t\t\t\t\tuniqList.push newTile[tileGen.tileSelect]\r\n\t\t\t# Handle generation of pages for a specific group - e.g. a specific room menu\r\n\t\t\telse if \"tileFilterValFrom\" of tileGen\r\n\t\t\t\tfor tileSource in sourceList\r\n\t\t\t\t\tfor tile in @automationActionGroups[tileSource]\r\n\t\t\t\t\t\tif tileGen.tileSelect of tile\r\n\t\t\t\t\t\t\tif tile[tileGen.tileSelect] is pageDef[tileGen.tileFilterValFrom]\r\n\t\t\t\t\t\t\t\tnewTile = @generateTileInfo(tileGen, tile)\r\n\t\t\t\t\t\t\t\ttileList.push newTile\r\n\t\t\t# Select a single specific tile but using data from the tabled config\r\n\t\t\t# such as the favourites list - e.g. using the groupname (room) and\r\n\t\t\t# tilename (action) to get a favourite tile\r\n\t\t\telse if \"tabConfigFavListName\" of tileGen and tileGen.tabConfigFavListName of tabletSpecificConfig\r\n\t\t\t\tfor favList in tabletSpecificConfig[tileGen.tabConfigFavListName]\r\n\t\t\t\t\tfavFound = false\r\n\t\t\t\t\tfor tileSource in sourceList\r\n\t\t\t\t\t\tfor tile in @automationActionGroups[tileSource]\r\n\t\t\t\t\t\t\tif tileGen.tileSelect of tile\r\n\t\t\t\t\t\t\t\tif tile[tileGen.tileSelect] is favList[tileGen.tileSelect] and tile[tileGen.tileNameFrom] is favList.tileName\r\n\t\t\t\t\t\t\t\t\tnewTile = @generateTileInfo(tileGen, tile)\r\n\t\t\t\t\t\t\t\t\tif \"tileText\" of favList\r\n\t\t\t\t\t\t\t\t\t\tnewTile.tileText = favList.tileText\r\n\t\t\t\t\t\t\t\t\ttileList.push newTile\r\n\t\t\t\t\t\t\t\t\tfavFound = true\r\n\t\t\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tif favFound\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t# Only select a single specific tile explicitly named in the pageDef\r\n\t\t\t# e.g. using the specific groupname (room) and tilename (action)\r\n\t\t\telse if \"tileFilterVal\" of tileGen\r\n\t\t\t\tfor tileSource in sourceList\r\n\t\t\t\t\tfor tile in @automationActionGroups[tileSource]\r\n\t\t\t\t\t\tif tileGen.tileSelect of tile\r\n\t\t\t\t\t\t\tif tile[tileGen.tileSelect] is tileGen.tileFilterVal\r\n\t\t\t\t\t\t\t\tif \"tileNameSelect\" of tileGen\r\n\t\t\t\t\t\t\t\t\tif tile[tileGenInfo.tileNameFrom] is tileGen.tileNameSelect\r\n\t\t\t\t\t\t\t\t\t\tnewTile = @generateTileInfo(tileGen, tile)\r\n\t\t\t\t\t\t\t\t\t\ttileList.push newTile\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\tnewTile = @generateTileInfo(tileGen, tile)\r\n\t\t\t\t\t\t\t\t\ttileList.push newTile\r\n\t\t\telse\r\n\t\t\t\tfor tileSource in sourceList\r\n\t\t\t\t\tfor tile in @automationActionGroups[tileSource]\r\n\t\t\t\t\t\tnewTile = @generateTileInfo(tileGen, tile)\r\n\t\t\t\t\t\ttileList.push newTile\r\n\r\n\t\t# Sort tiles if required\r\n\t\tif \"tileSort\" of tileGen\r\n\t\t\ttileList.sort (a,b) =>\r\n\t\t\t\tif a[tileGen.tileSort] < b[tileGen.tileSort] then return -1\r\n\t\t\t\tif a[tileGen.tileSort] > b[tileGen.tileSort] then return 1\r\n\t\t\t\treturn 0\r\n\t\tfor tile in tileList\r\n\t\t\tpageDef.tiles.push tile\r\n\t\treturn\r\n\r\n\tgenerateTileInfo: (tileGenInfo, tile) ->\r\n\t\t# Tiles can be selected either specifically or using data\r\n\t\t# from the tablet configuration - such as favourites\r\n\t\tnewTile = {}\r\n\t\tfor key, val of tile\r\n\t\t\tnewTile[key] = val\r\n\t\tnewTile.tileType = tileGenInfo.tileType\r\n\t\tnewTile.pageMode = if \"pageMode\" of tileGenInfo then tileGenInfo.pageMode else \"\"\r\n\t\tnewTile.tileMode = if \"tileMode\" of tileGenInfo then tileGenInfo.tileMode else \"\"\r\n\t\tnewTile.tileName = tile[tileGenInfo.tileNameFrom]\r\n\t\tnewTile.colType = if tileGenInfo.colType? then tileGenInfo.colType else \"\"\r\n\t\tnewTile.url = if \"urlFrom\" of tileGenInfo then tile[tileGenInfo.urlFrom] else (if \"url\" of tileGenInfo then newTile.url = tileGenInfo.url)\r\n\t\tif tileGenInfo.pageGenRule?\r\n\t\t\tnewTile.pageGenRule = tileGenInfo.pageGenRule\r\n\t\tif tileGenInfo.rowSpan?\r\n\t\t\tnewTile.rowSpan = tileGenInfo.rowSpan\r\n\t\tif tileGenInfo.colSpan?\r\n\t\t\tnewTile.colSpan = tileGenInfo.colSpan\r\n\t\tnewTile.tileText = tile[tileGenInfo.tileTextFrom]\r\n\t\tif \"iconName\" of tileGenInfo\r\n\t\t\tnewTile.iconName = tileGenInfo.iconName\r\n\t\treturn newTile\r\n\r\n\tgenerateNewPage: (context) ->\r\n\t\ttabConfig = @app.tabletConfigManager.getConfigData()\r\n\t\tif context.pageGenRule? and context.pageGenRule isnt \"\"\r\n\t\t\tif context.pageGenRule of tabConfig.common.pageGen\r\n\t\t\t\tpageGen = tabConfig.common.pageGen[context.pageGenRule]\r\n\t\t\t\t@generatedPage =\r\n\t\t\t\t\t\"pageName\": if \"pageNameFrom\" of pageGen then context[pageGen.pageNameFrom] else pageGen.pageName\r\n\t\t\t\t\t\"pageTitle\": if \"pageTitleFrom\" of pageGen then context[pageGen.pageTitleFrom] else pageGen.pageTitle\r\n\t\t\t\t\t\"columns\": pageGen.columns\r\n\t\t\t\t\t\"tiles\": (tile for tile in pageGen.tilesFixed)\r\n\t\t\t\t\t\"tileGen\": (tileGen for tileGen in pageGen.tileGen)\r\n\t\t\t\tif \"tileModeFrom\" of pageGen\r\n\t\t\t\t\tfor tileGen in @generatedPage.tileGen\r\n\t\t\t\t\t\ttileGen.tileMode = context[pageGen.tileModeFrom]\r\n\t\t\t\tfor col in @generatedPage.columns.landscape\r\n\t\t\t\t\tif col.titleGen?\r\n\t\t\t\t\t\tcol.title = @generatedPage[col.titleGen]\r\n\t\t\t\tfor col in @generatedPage.columns.portrait\r\n\t\t\t\t\tif col.titleGen?\r\n\t\t\t\t\t\tcol.title = @generatedPage[col.titleGen]\r\n\t\t\t\t@generatePageContents(@generatedPage, tabConfig)\r\n\t\t\t\treturn @generatedPage.pageName\r\n\t\treturn \"\"\r\n\r\n\tdisplay: ->\r\n\t\t@curTabPage = new App.TabPage(@app, @parentTag, @curPageDef, @buttonCallback)\r\n\t\t@curTabPage.updateDom()\r\n\r\n\tbuttonCallback: (context) =>\r\n\t\t# console.log \"buttonCallback user button pressed \" + JSON.stringify(context) + \"\\nprevPage \" + JSON.stringify(@curPageDef) + \"\\n\"\r\n\r\n\t\t# Check if settings save required\r\n\t\t# console.log \"app-pages buttonCallback prev pageName \" + @curPageDef.pageName + \" == settings \" + (@curPageDef.pageName == \"Settings\") + \" not null \" + (@curPageDef?)\r\n\t\t# if (@curPageDef?) && (@curPageDef.pageName == \"Settings\")\r\n\t\t# \t# console.log \"app-pages buttonCallback saving config\"\r\n\t\t# \t@app.tabletConfigManager.saveDeviceConfig()\r\n\r\n\t\t# Force reload\r\n\t\tif context.forceReloadPages? and context.forceReloadPages\r\n\t\t\t@app.requestConfigData()\r\n\r\n\t\t# Check for navigation button\r\n\t\tif \"tileMode\" of context and context.tileMode is \"SelFavs\"\r\n\t\t\t@addFavouriteButton(context)\r\n\t\t\t@setCurrentPage(@defaultPageName, false)\r\n\t\t\t@display()\r\n\t\telse if \"/\" in context.url\r\n\t\t\t(@automationManager.executeCommand) context.url\r\n\t\telse if \"~\" in context.url\r\n\t\t\tif @curTabPage?\r\n\t\t\t\t@curTabPage.handlePageNav(context.url)\r\n\t\telse if @setCurrentPage(context.url, false)\r\n\t\t\t@display()\r\n\t\telse if context.url is \"DelFav\"\r\n\t\t\t@deleteFavouriteButton(context)\r\n\t\t\t@setCurrentPage(@defaultPageName, false)\r\n\t\t\t@display()\r\n\t\telse if context.url is \"AppUpdate\"\r\n\t\t\t@app.appUpdate()\r\n\t\telse if context.url is \"ExitYes\"\r\n\t\t\tnavigator.app.exitApp()\r\n\t\telse if context.tileType is \"clock\"\r\n\t\t\talert \"App version \" + @VERSION\r\n\t\telse\r\n\t\t\tconsole.log \"app-pages Attempting page generation \" + JSON.stringify(context)\r\n\t\t\tnewPageName = @generateNewPage(context)\r\n\t\t\t@setCurrentPage(newPageName, false)\r\n\t\t\t@display()\r\n\t\treturn\r\n\r\n\taddFavouriteButton: (context) ->\r\n\t\t@app.tabletConfigManager.addFavouriteButton(context)\r\n\t\t@rebuild(false)\r\n\t\treturn\r\n\r\n\tdeleteFavouriteButton: (context) ->\r\n\t\t@app.tabletConfigManager.deleteFavouriteButton(context)\r\n\t\t@rebuild(false)\r\n\t\treturn\r\n\r\n"
  ]
}