// Generated by CoffeeScript 1.8.0
var TabPage;

TabPage = (function() {
  function TabPage(app, parentTag, pageDef, defaultActionFn) {
    this.app = app;
    this.parentTag = parentTag;
    this.pageDef = pageDef;
    this.defaultActionFn = defaultActionFn;
    this.tileColours = new TileColours;
    this.tiles = [];
    this.titlesTopMargin = 60;
    this.titlesYPos = 10;
    this.pageBorders = [12, 5, 12, 15];
    this.tileSepXPixels = 20;
    this.tileSepYPixels = 10;
    this.groupSepPixels = 10;
    this.pageId = "sqPage";
    this.pageSelector = "#" + this.pageId;
    this.pageTitleClass = "sqPageTitle";
    this.pageTitleSelector = "." + this.pageTitleClass;
    this.tilesClass = "sqTiles";
    this.tileContainerClass = "sqTileContainer";
    this.tilesSelector = '.' + this.tileContainerClass;
    this.colTitleClass = "sqColTitle";
    this.tilesColumns = 2;
    this.nextTileIdx = 0;
    this.columnTypes = {};
    return;
  }

  TabPage.prototype.handlePageNav = function(pageNav) {
    var navAction, tile, tileName, _, _i, _len, _ref, _ref1;
    _ref = pageNav.match(/\~(.*)\?(.*)/), _ = _ref[0], tileName = _ref[1], navAction = _ref[2];
    _ref1 = this.tiles;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      tile = _ref1[_i];
      if (tile.tileDef.tileName === tileName) {
        tile.handleAction(navAction);
        break;
      }
    }
  };

  TabPage.prototype.updateDom = function() {
    var col, colIdx, colXPos, newTile, sizeX, sizeY, tile, tileDef, title, x, y, _i, _j, _len, _len1, _ref, _ref1, _ref2;
    this.calcLayout();
    this.removeAll();
    $(this.parentTag).html("<div id=\"" + this.pageId + "\" class=\"sqPage\">\n	<div class=\"" + this.pageTitleClass + "\"/>\n	<div class=\"" + this.tilesClass + "\" style=\"height:100%;width:100%\">\n		<div class=" + this.tileContainerClass + " style=\"width:100%;display:block;zoom:1;\">\n		</div>\n	</div>\n</div>");
    if (this.columnsDef != null) {
      _ref = this.columnsDef;
      for (colIdx = _i = 0, _len = _ref.length; _i < _len; colIdx = ++_i) {
        col = _ref[colIdx];
        title = col.title;
        if ((title != null) && title !== "") {
          $(this.pageTitleSelector).append("<div class=\"" + this.colTitleClass + " " + this.colTitleClass + "_" + colIdx + "\">" + title + "\n</div>");
        }
        colXPos = this.getColXPos(colIdx);
        this.setTitlePositionCss(colIdx, colXPos, this.titlesYPos, 100);
      }
    }
    if (this.pageDef.tiles != null) {
      _ref1 = this.pageDef.tiles;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        tileDef = _ref1[_j];
        newTile = this.makeTileFromTileDef(tileDef);
        tile = this.addTileToPage(tileDef, newTile);
        _ref2 = this.getCellPos(tile), x = _ref2[0], y = _ref2[1], sizeX = _ref2[2], sizeY = _ref2[3];
        tile.reposition(x, y, sizeX, sizeY);
      }
    }
  };

  TabPage.prototype.removeAll = function() {
    this.nextTileIdx = 0;
    this.clearTiles();
    $("#" + this.pageId).remove();
  };

  TabPage.prototype.clearTiles = function() {
    var tile, _i, _len, _ref;
    _ref = this.tiles;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tile = _ref[_i];
      tile.removeFromDoc();
    }
    this.tiles = [];
  };

  TabPage.prototype.addTileToPage = function(tileDef, tile) {
    tile.addToDoc();
    this.tiles.push(tile);
    return tile;
  };

  TabPage.prototype.makeTileFromTileDef = function(tileDef) {
    var dayIdx, tile;
    tileDef = this.tileDefCleanCheck(tileDef);
    if (tileDef.tileType === "calendar") {
      dayIdx = tileDef.calDayIndex != null ? tileDef.calDayIndex : 0;
      tile = new CalendarTile(this.app, tileDef, dayIdx);
    } else if (tileDef.tileType === "clock") {
      tile = new Clock(tileDef);
    } else if (tileDef.tileType === "iframe") {
      tile = new IframeTile(tileDef);
    } else if (tileDef.tileType === "checkbox") {
      tile = new CheckBoxTile(tileDef);
    } else if (tileDef.tileType === "textentry") {
      tile = new TextEntryTile(tileDef);
    } else {
      tile = new SceneButton(tileDef);
    }
    tile.setTileIndex(this.nextTileIdx++);
    return tile;
  };

  TabPage.prototype.tileDefCleanCheck = function(tileDef) {
    tileDef.parentTag = this.tilesSelector;
    if (!("tileColour" in tileDef)) {
      tileDef.tileColour = this.tileColours.getNextColour();
    }
    if (!("clickFn" in tileDef)) {
      tileDef.clickFn = this.defaultActionFn;
    }
    if (!("colSpan" in tileDef)) {
      tileDef.colSpan = 1;
    }
    if (!("rowSpan" in tileDef)) {
      tileDef.rowSpan = 1;
    }
    if (!("url" in tileDef)) {
      tileDef.url = "";
    }
    if (!("visibility" in tileDef)) {
      tileDef.visibility = "both";
    }
    if (!("tileName" in tileDef)) {
      tileDef.tileName = "";
    }
    if (!("tileText" in tileDef)) {
      tileDef.tileText = "";
    }
    if (!("iconName" in tileDef)) {
      tileDef.iconName = "";
    }
    if (!("positionCue" in tileDef)) {
      tileDef.positionCue = "";
    }
    tileDef.tierIdx = 0;
    tileDef.groupIdx = 0;
    return tileDef;
  };

  TabPage.prototype.getPageHeight = function() {
    var pageSel;
    pageSel = $("#" + this.pageId);
    return pageSel[0].clientHeight;
  };

  TabPage.prototype.getPageTop = function() {
    return 0;
  };

  TabPage.prototype.calcLayout = function() {
    var colDef, colIdx, colType, isPortrait, winHeight, winWidth, _i, _len, _ref;
    winWidth = $(window).width();
    winHeight = $(window).height();
    isPortrait = winWidth < winHeight;
    if (isPortrait) {
      this.columnsDef = this.pageDef.columns != null ? this.pageDef.columns.portrait : null;
      this.tilesAcross = 2;
      this.tilesDown = this.pageDef.rows != null ? this.pageDef.rows.portrait : 8;
      this.columnsAcross = 2;
    } else {
      this.columnsDef = this.pageDef.columns != null ? this.pageDef.columns.landscape : null;
      this.tilesAcross = 2;
      this.tilesDown = this.pageDef.rows != null ? this.pageDef.rows.landscape : 5;
      this.columnsAcross = 3;
    }
    this.noTitles = true;
    if (this.columnsDef != null) {
      this.tilesAcross = 0;
      _ref = this.columnsDef;
      for (colIdx = _i = 0, _len = _ref.length; _i < _len; colIdx = ++_i) {
        colDef = _ref[colIdx];
        if ((colDef.title != null) && colDef.title !== "") {
          this.noTitles = false;
        }
        colType = colDef.colType != null ? colDef.colType : "";
        if (!(colType in this.columnTypes)) {
          this.columnTypes[colType] = {
            frontTileCount: 0,
            endTileCount: 0,
            colStartIdx: colIdx,
            colCount: 1,
            colSpan: colDef.colSpan != null ? colDef.colSpan : 1
          };
        } else {
          this.columnTypes[colType].colCount++;
          this.columnTypes[colType].colSpan += colDef.colSpan != null ? colDef.colSpan : 1;
        }
        this.tilesAcross += colDef.colSpan;
      }
      this.columnsAcross = this.columnsDef.length;
    } else {
      this.columnTypes = {
        "": {
          frontTileCount: 0,
          endTileCount: 0,
          colStartIdx: 0,
          colCount: 1
        }
      };
    }
    this.cellWidth = (winWidth - this.pageBorders[1] - this.pageBorders[3]) / this.tilesAcross;
    this.cellHeight = (winHeight - this.pageBorders[0] - this.pageBorders[2] - (this.noTitles ? 0 : this.titlesTopMargin)) / this.tilesDown;
    this.tileWidth = this.cellWidth - this.tileSepXPixels;
    this.tileHeight = this.cellHeight - this.tileSepYPixels;
    $("#" + this.pageId).css({
      "height": document.documentElement.clientHeight + "px"
    });
    return isPortrait;
  };

  TabPage.prototype.getColXPos = function(colIdx) {
    var cellX, cellXIdx, i, xStart, _i;
    xStart = this.pageBorders[3];
    cellX = xStart + colIdx * this.cellWidth * 2;
    cellXIdx = 0;
    for (i = _i = 0; 0 <= colIdx ? _i < colIdx : _i > colIdx; i = 0 <= colIdx ? ++_i : --_i) {
      cellXIdx += this.columnsDef != null ? this.columnsDef[i].colSpan : void 0;
    }
    return xStart + cellXIdx * this.cellWidth;
  };

  TabPage.prototype.getTitlePos = function() {
    return [0, 10, "200%"];
  };

  TabPage.prototype.getGroupTitleWidth = function() {
    return 400;
  };

  TabPage.prototype.getColInfo = function(tile) {};

  TabPage.prototype.getCellPos = function(tile) {
    var cellX, cellY, colIdx, colInfo, colSpan, colType, rowIdx, rowSpan, sizeX, sizeY;
    colType = tile.tileDef.colType != null ? tile.tileDef.colType : "";
    if (colType in this.columnTypes) {
      colInfo = this.columnTypes[colType];
    } else {
      colInfo = this.columnTypes[""];
    }
    if (!("colSpan" in tile.tileDef) || tile.tileDef.colSpan === 0) {
      colSpan = colInfo.colSpan;
    } else {
      colSpan = tile.tileDef.colSpan;
    }
    if (!("rowSpan" in tile.tileDef) || tile.tileDef.rowSpan === 0) {
      rowSpan = this.tilesDown;
    } else {
      rowSpan = tile.tileDef.rowSpan;
    }
    if (tile.tileDef.positionCue === "end") {
      colIdx = colInfo.colStartIdx + colInfo.colCount - 1 - Math.floor(colInfo.endTileCount / this.tilesDown);
      rowIdx = this.tilesDown - Math.floor(colInfo.endTileCount % this.tilesDown) - rowSpan;
      colInfo.endTileCount += rowSpan;
    } else {
      colIdx = colInfo.colStartIdx + Math.floor(colInfo.frontTileCount / this.tilesDown);
      rowIdx = Math.floor(colInfo.frontTileCount % this.tilesDown);
      colInfo.frontTileCount += rowSpan;
    }
    cellX = this.getColXPos(colIdx);
    cellY = this.pageBorders[0] + (this.noTitles ? 0 : this.titlesTopMargin) + rowIdx * this.cellHeight;
    sizeX = this.tileWidth * colSpan + (this.tileSepXPixels * (colSpan - 1));
    sizeY = this.tileHeight * rowSpan + (this.tileSepYPixels * (rowSpan - 1));
    return [cellX, cellY, sizeX, sizeY];
  };

  TabPage.prototype.reDoLayout = function() {
    return this.calcLayout();
  };

  TabPage.prototype.getTilesAcrossScreen = function() {
    return this.tilesAcross;
  };

  TabPage.prototype.setTitlePositionCss = function(colIdx, posX, posY) {
    $('.' + this.colTitleClass + "_" + colIdx).css({
      "margin-left": posX + "px",
      "margin-top": posY + "px",
      "display": "block",
      "position": "absolute"
    });
  };

  return TabPage;

})();
