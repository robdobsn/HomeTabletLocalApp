// Generated by CoffeeScript 1.7.1
var TabPage;

TabPage = (function() {
  function TabPage(parentTag, pageDef, defaultActionFn, mediaPlayHelper) {
    this.parentTag = parentTag;
    this.pageDef = pageDef;
    this.defaultActionFn = defaultActionFn;
    this.mediaPlayHelper = mediaPlayHelper;
    this.tileColours = new TileColours;
    this.tiles = [];
    this.titlesTopMargin = 60;
    this.titlesYPos = 10;
    this.pageBorders = [12, 12, 12, 12];
    this.tileSepXPixels = 20;
    this.tileSepYPixels = 10;
    this.groupSepPixels = 10;
    this.pageId = "sqPage";
    this.pageSelector = "#" + this.pageId;
    this.pageTitleClass = "sqPageTitle";
    this.pageTitleSelector = "." + this.pageTitleClass;
    this.tilesClass = "sqTiles";
    this.tileContainerClass = "sqTileContainer";
    this.tilesSelector = '.' + this.tileContainerClass;
    this.colTitleClass = "sqColTitle";
    this.tilesColumns = 2;
    this.nextTileIdx = 0;
    return;
  }

  TabPage.prototype.updateDom = function() {
    var col, colIdx, colXPos, fontScale, newTile, sizeX, sizeY, tile, tileDef, x, y, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3;
    this.calcLayout();
    this.removeAll();
    $(this.parentTag).html("<div id=\"" + this.pageId + "\" class=\"sqPage\">\n	<div class=\"" + this.pageTitleClass + "\"/>\n	<div class=\"" + this.tilesClass + "\">\n		<div class=" + this.tileContainerClass + " style=\"width:3000px;display:block;zoom:1;\">\n		</div>\n	</div>\n</div>");
    if (this.columnsDef != null) {
      _ref = this.columnsDef;
      for (colIdx = _i = 0, _len = _ref.length; _i < _len; colIdx = ++_i) {
        col = _ref[colIdx];
        if ((col.title != null) && col.title !== "") {
          $(this.pageTitleSelector).append("<div class=\"" + this.colTitleClass + " " + this.colTitleClass + "_" + colIdx + "\">" + col.title + "\n</div>");
        }
        colXPos = this.getColXPos(colIdx);
        this.setTitlePositionCss(colIdx, colXPos, this.titlesYPos, 100);
      }
    }
    this.tileLayoutCount = 0;
    _ref1 = this.pageDef.tiles;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      tileDef = _ref1[_j];
      newTile = this.makeTileFromTileDef(tileDef);
      tile = this.addTileToPage(tileDef, newTile);
      _ref2 = this.getCellPos(tile), x = _ref2[0], y = _ref2[1], fontScale = _ref2[2];
      _ref3 = this.getTileSize(tile), sizeX = _ref3[0], sizeY = _ref3[1];
      tile.reposition(x, y, sizeX, sizeY, fontScale);
    }
  };

  TabPage.prototype.removeAll = function() {
    this.nextTileIdx = 0;
    this.clearTiles();
    $("#" + this.pageId).remove();
  };

  TabPage.prototype.clearTiles = function() {
    var tile, _i, _len, _ref;
    _ref = this.tiles;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tile = _ref[_i];
      tile.removeFromDoc();
    }
    this.tiles = [];
  };

  TabPage.prototype.addTileToPage = function(tileDef, tile) {
    tile.addToDoc();
    this.tiles.push(tile);
    return tile;
  };

  TabPage.prototype.makeTileFromTileDef = function(tileDef) {
    var tile, tileBasics;
    tileBasics = this.tileBasicsFromDef(tileDef);
    if (tileBasics === null) {
      return;
    }
    if (tileDef.tileType === "calendar") {
      tile = new CalendarTile(tileBasics, this.calendarUrl, tileDef.calDayIndex);
    } else if (tileDef.tileType === "clock") {
      tile = new Clock(tileBasics);
    } else if (tileDef.tileType === "config") {
      tile = new ConfigTile(tileBasics, tileDef.configType);
    } else {
      tile = new SceneButton(tileBasics);
    }
    tile.setTileIndex(this.nextTileIdx++);
    return tile;
  };

  TabPage.prototype.tileBasicsFromDef = function(tileDef) {
    var clickFn, colSpan, iconName, isFavourite, name, positionCue, rowSpan, tileBasics, tileColour, tileText, uri, vis;
    tileColour = this.tileColours.getNextColour();
    clickFn = this.defaultActionFn;
    if ("clickFn" in tileDef) {
      clickFn = tileDef.clickFn;
    }
    colSpan = tileDef.colSpan != null ? tileDef.colSpan : 1;
    rowSpan = tileDef.rowSpan != null ? tileDef.rowSpan : 1;
    uri = tileDef.uri != null ? tileDef.uri : "";
    vis = tileDef.visibility != null ? tileDef.visibility : "both";
    name = tileDef.name != null ? tileDef.name : tileDef.tileName;
    tileText = tileDef.tileText != null ? tileDef.tileText : name;
    iconName = tileDef.iconName != null ? tileDef.iconName : "";
    positionCue = tileDef.positionCue != null ? tileDef.positionCue : "";
    isFavourite = false;
    tileBasics = new TileBasics(tileColour, colSpan, rowSpan, clickFn, uri, name, tileText, vis, this.tilesSelector, tileDef.tileType, iconName, isFavourite, positionCue, this.mediaPlayHelper);
    tileBasics.setTierGroupIds(0, 0);
    return tileBasics;
  };

  TabPage.prototype.getPageHeight = function() {
    var pageSel;
    pageSel = $("#" + this.pageId);
    return pageSel[0].clientHeight;
  };

  TabPage.prototype.getPageTop = function() {
    return 0;
  };

  TabPage.prototype.calcLayout = function() {
    var colDef, isPortrait, winHeight, winWidth, _i, _len, _ref;
    winWidth = $(window).width();
    winHeight = $(window).height();
    isPortrait = winWidth < winHeight;
    if (isPortrait) {
      this.columnsDef = this.pageDef.columnsPortrait;
      this.tilesAcross = 3;
      this.tilesDown = 8;
      this.columnsAcross = 2;
    } else {
      this.columnsDef = this.pageDef.columnsLandscape;
      this.tilesAcross = 5;
      this.tilesDown = 5;
      this.columnsAcross = 3;
    }
    this.noTitles = true;
    if (this.columnsDef != null) {
      this.tilesAcross = 0;
      _ref = this.columnsDef;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        colDef = _ref[_i];
        this.tilesAcross += colDef.colSpan;
        if ((colDef.title != null) && colDef.title !== "") {
          this.noTitles = false;
        }
      }
      this.columnsAcross = this.columnsDef.length;
    }
    this.cellWidth = (winWidth - this.pageBorders[1] - this.pageBorders[3] - (this.groupSepPixels * Math.floor((this.tilesAcross - 1) / 3))) / this.tilesAcross;
    this.cellHeight = (winHeight - this.pageBorders[0] - this.pageBorders[2] - (this.noTitles ? 0 : this.titlesTopMargin)) / this.tilesDown;
    this.tileWidth = this.cellWidth - this.tileSepXPixels;
    this.tileHeight = this.cellHeight - this.tileSepYPixels;
    $("#" + this.pageId).css({
      "height": document.documentElement.clientHeight + "px"
    });
    return isPortrait;
  };

  TabPage.prototype.getColXPos = function(colIdx) {
    var cellX, cellXIdx, i, xStart, _i;
    xStart = this.pageBorders[3];
    cellX = xStart + colIdx * this.cellWidth * 2;
    cellXIdx = 0;
    for (i = _i = 0; 0 <= colIdx ? _i < colIdx : _i > colIdx; i = 0 <= colIdx ? ++_i : --_i) {
      cellXIdx += this.columnsDef != null ? this.columnsDef[i].colSpan : void 0;
    }
    return xStart + cellXIdx * this.cellWidth;
  };

  TabPage.prototype.getTileSize = function(tile) {
    return [this.tileWidth * tile.tileBasics.colSpan + (this.tileSepXPixels * (tile.tileBasics.colSpan - 1)), this.tileHeight * tile.tileBasics.rowSpan + (this.tileSepYPixels * (tile.tileBasics.rowSpan - 1))];
  };

  TabPage.prototype.calcFontSizePercent = function() {
    return 100 * Math.max(this.cellWidth, this.cellHeight) / 300;
  };

  TabPage.prototype.getTitlePos = function() {
    return [0, 10, "200%"];
  };

  TabPage.prototype.getGroupTitleWidth = function() {
    return 400;
  };

  TabPage.prototype.getCellPos = function(tile) {
    var cellX, cellY, colIdx, fontScaling, rowIdx;
    colIdx = Math.floor(this.tileLayoutCount / this.tilesDown);
    rowIdx = Math.floor(this.tileLayoutCount % this.tilesDown);
    if (tile.tileBasics.positionCue === "end") {
      rowIdx = this.tilesDown - tile.tileBasics.rowSpan;
      colIdx = this.columnsAcross - 2;
    } else {
      this.tileLayoutCount++;
    }
    cellX = this.getColXPos(colIdx);
    cellY = this.pageBorders[0] + (this.noTitles ? 0 : this.titlesTopMargin) + rowIdx * this.cellHeight;
    fontScaling = this.calcFontSizePercent();
    return [cellX, cellY, fontScaling];
  };

  TabPage.prototype.reDoLayout = function() {
    var isPortrait;
    return isPortrait = this.calcLayout();
  };

  TabPage.prototype.getTilesAcrossScreen = function() {
    return this.tilesAcross;
  };

  TabPage.prototype.setTitlePositionCss = function(colIdx, posX, posY, fontScaling) {
    $('.' + this.colTitleClass + "_" + colIdx).css({
      "margin-left": posX + "px",
      "margin-top": posY + "px",
      "font-size": fontScaling + "%",
      "display": "block",
      "position": "absolute"
    });
  };

  return TabPage;

})();
