// Generated by CoffeeScript 1.6.3
var TestWallTabApp,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

TestWallTabApp = (function() {
  function TestWallTabApp() {
    this.actionOnUserIdle = __bind(this.actionOnUserIdle, this);
    this.tileColours = new TileColours;
  }

  TestWallTabApp.prototype.go = function() {
    var mainTier, secondTier,
      _this = this;
    $("body").append("<div id=\"sqWrapper\">\n</div>");
    this.tileTiers = new TileTiers("#sqWrapper");
    mainTier = new TileTier("#sqWrapper", "_Tier1");
    mainTier.addToDom();
    this.tileTiers.addTier(mainTier);
    this.favouritesTierIdx = 0;
    this.favouritesGroupIdx = this.tileTiers.addGroup(this.favouritesTierIdx, "Home");
    this.calendarTierIdx = 0;
    this.calendarGroupIdx = this.tileTiers.addGroup(this.calendarTierIdx, "Calendar");
    this.sceneTierIdx = 0;
    this.sceneGroupIdx = this.tileTiers.addGroup(this.sceneTierIdx, "Scenes");
    secondTier = new TileTier("#sqWrapper", "_Tier2");
    secondTier.addToDom();
    this.tileTiers.addTier(secondTier);
    this.sonosTierIdx = 1;
    this.sonosGroupIdx = this.tileTiers.addGroup(this.sonosTierIdx, "Sonos");
    this.tileTiers.clear();
    this.setupInitialUI();
    this.makeUriButton(this.favouritesTierIdx, this.favouritesGroupIdx, "Test1", "musicicon", "/testuri1", 2, 2);
    this.tileTiers.reDoLayout();
    $(window).on('orientationchange', function() {
      return _this.tileTiers.reDoLayout();
    });
    return $(window).on('resize', function() {
      return _this.tileTiers.reDoLayout();
    });
  };

  TestWallTabApp.prototype.addClock = function(tierIdx, groupIdx) {
    var tile, tileBasics, visibility;
    visibility = "all";
    tileBasics = new TileBasics(this.tileColours.getNextColour(), 3, 1, null, "", "clock", visibility, this.tileTiers.getTileContainerSelector(tierIdx));
    tile = new Clock(tileBasics);
    return this.tileTiers.addTileToTierGroup(tierIdx, groupIdx, tile);
  };

  TestWallTabApp.prototype.addCalendar = function(tierIdx, onlyAddToGroupIdx) {
    var calDayIdx, calG, colSpan, colSpans, favG, groupIdx, groupInfo, i, orientation, rowSpan, rowSpans, tile, tileBasics, visibility, _i, _results;
    if (onlyAddToGroupIdx == null) {
      onlyAddToGroupIdx = null;
    }
    _results = [];
    for (orientation = _i = 0; _i <= 1; orientation = ++_i) {
      calG = this.calendarGroupIdx;
      favG = this.favouritesGroupIdx;
      if (orientation === 0) {
        visibility = "landscape";
        groupInfo = [calG, calG];
        calDayIdx = [0, 1];
        colSpans = [2, 2];
        rowSpans = [2, 1];
      } else {
        visibility = "portrait";
        groupInfo = [favG, calG, calG, calG];
        calDayIdx = [0, 1, 2, 3];
        colSpans = [3, 3, 3, 3];
        rowSpans = [2, 2, 2, 1];
      }
      _results.push((function() {
        var _j, _ref, _results1;
        _results1 = [];
        for (i = _j = 0, _ref = groupInfo.length - 1; 0 <= _ref ? _j <= _ref : _j >= _ref; i = 0 <= _ref ? ++_j : --_j) {
          groupIdx = groupInfo[i];
          colSpan = colSpans[i];
          rowSpan = rowSpans[i];
          if (!((onlyAddToGroupIdx != null) && (onlyAddToGroupIdx !== groupIdx))) {
            tileBasics = new TileBasics(this.tileColours.getNextColour(), colSpan, rowSpan, null, "", "calendar", visibility, this.tileTiers.getTileContainerSelector(tierIdx));
            tile = new CalendarTile(tileBasics, this.calendarUrl, calDayIdx[i]);
            _results1.push(this.tileTiers.addTileToTierGroup(tierIdx, groupIdx, tile));
          } else {
            _results1.push(void 0);
          }
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  TestWallTabApp.prototype.makeUriButton = function(tierIdx, groupIdx, name, iconname, uri, colSpan, rowSpan, visibility) {
    var tile, tileBasics;
    if (visibility == null) {
      visibility = "all";
    }
    tileBasics = new TileBasics(this.tileColours.getNextColour(), colSpan, rowSpan, "testCommand", uri, name, visibility, this.tileTiers.getTileContainerSelector(tierIdx));
    tile = new SceneButton(tileBasics, iconname, name);
    return this.tileTiers.addTileToTierGroup(tierIdx, groupIdx, tile);
  };

  TestWallTabApp.prototype.setupInitialUI = function() {
    this.addClock(this.favouritesTierIdx, this.favouritesGroupIdx);
    return this.addCalendar(this.calendarTierIdx);
  };

  TestWallTabApp.prototype.actionOnUserIdle = function() {
    return $("html, body").animate({
      scrollLeft: "0px"
    });
  };

  return TestWallTabApp;

})();
